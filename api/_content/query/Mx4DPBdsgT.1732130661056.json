[{"_path":"/modules/software-development-handson/info","_dir":"software-development-handson","_draft":false,"_partial":false,"_locale":"","title":"Learning objectives","description":"","type":"info","order":0,"body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"learning-objectives"},"children":[{"type":"text","value":"Learning Objectives"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In this module you will learn to answer the following questions:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"How do I set up or adapt my continuous integration and deployment system to minimize energy usage?"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"What are good triggers and intervals to run my various types of tests?"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"How do I measure the energy performance of particular areas of my code?"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"How do I decide which areas are suitable to be improved?"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"What changes can I make to improve the energy efficiency of my code?"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"learning-objectives","depth":2,"text":"Learning Objectives"}]}},"_type":"markdown","_id":"local_fs:modules:software-development-handson:info.md","_source":"local_fs","_file":"modules/software-development-handson/info.md","_stem":"modules/software-development-handson/info","_extension":"md","plainText":"---\ntitle: Learning objectives\ntype: info\norder: 0\n---\n\n## Learning Objectives\n\nIn this module you will learn to answer the following questions:\n\n* How do I set up or adapt my continuous integration and deployment system to minimize energy usage?\n* What are good triggers and intervals to run my various types of tests? \n* How do I measure the energy performance of particular areas of my code?\n* How do I decide which areas are suitable to be improved?\n* What changes can I make to improve the energy efficiency of my code?\n"},{"_path":"/modules/software-development-handson/exercises_good-practices","_dir":"software-development-handson","_draft":false,"_partial":false,"_locale":"","title":"Good Practices","description":"Good practices in software engineering are essential to reduce energy usage. Without proper (automated) testing, documentation and sharing, resources are wasted constantly.","type":"exercise","order":3,"body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"good-practices-will-save-the-earth"},"children":[{"type":"text","value":"Good practices will save the earth!"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Good practices in software engineering are essential to reduce energy usage. Without proper (automated) testing, documentation and sharing, resources are wasted constantly."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Examples are:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"running (and failing) untested or badly tested workflows in high-resource jobs"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"having to redo a lot of work because things are lost as they were not stored/versioned properly"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"having to redo someone elses work because it was not properly published or licensed"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://coderefinery.org/","rel":["nofollow"]},"children":[{"type":"text","value":"CodeRefinery"}]},{"type":"text","value":" is a very good resource for learning best practices in programming and data management for research software. Their "},{"type":"element","tag":"a","props":{"href":"https://coderefinery.org/lessons/","rel":["nofollow"]},"children":[{"type":"text","value":"full blown course"}]},{"type":"text","value":" lasts 6 days and goes fairly deep into the most important aspects of software development."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The "},{"type":"element","tag":"a","props":{"href":"https://coderefinery.github.io/research-software-engineering/","rel":["nofollow"]},"children":[{"type":"text","value":"“CodeRefinery in 1 hour” course"}]},{"type":"text","value":" condenses most of the materials in a 1 hours crash-course. For this exercise we will follow the contents of this crash course. Below you will find the links to the six course chapters on various of research software development."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Besides the links to the coderefinery course, in each of the sections below you will also find links to corresponding modules in the "},{"type":"element","tag":"a","props":{"href":"https://esciencecenter-digital-skills.github.io/research-software-support/","rel":["nofollow"]},"children":[{"type":"text","value":"Research Software Support platform."}]},{"type":"text","value":". These materials are less hands-on because they are made for research supporters, however they often give you a nice conceptual overview of the concepts. You can regard these as optional additional materials."}]},{"type":"element","tag":"h2","props":{"id":"_0-example-project"},"children":[{"type":"text","value":"0. Example project"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The course starts with introducing an example project that will be used throughout the course."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can also choose to follow the exercises using your own software project, in that case start with "},{"type":"element","tag":"a","props":{"href":"#_1-version-control-and-code-review"},"children":[{"type":"text","value":"step 1"}]},{"type":"text","value":". Throughout the exercises, the example project will be used, we trust you can translate the steps to your own project. If you notice that this doesn't work for you, try using the example project."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"If you want to use the example project, follow the link below and read up on simulating the motion of planets.\n"},{"type":"element","tag":"a","props":{"href":"https://coderefinery.github.io/research-software-engineering/example/","rel":["nofollow"]},"children":[{"type":"text","value":"Example project: simulating the motion of planets"}]}]},{"type":"element","tag":"h2","props":{"id":"_1-version-control-and-code-review"},"children":[{"type":"text","value":"1. Version control and code review"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Follow the materials and exercises from coderefinery about\n"},{"type":"element","tag":"a","props":{"href":"https://coderefinery.github.io/research-software-engineering/version-control/","rel":["nofollow"]},"children":[{"type":"text","value":"version control and code review"}]},{"type":"text","value":"."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Additional Research Software Support materials on "},{"type":"element","tag":"a","props":{"href":"https://esciencecenter-digital-skills.github.io/research-software-support/modules/version-control/info","rel":["nofollow"]},"children":[{"type":"text","value":"software version control"}]}]},{"type":"element","tag":"h2","props":{"id":"_2-documentation"},"children":[{"type":"text","value":"2. Documentation"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Follow the materials and exercises from coderefinery about "},{"type":"element","tag":"a","props":{"href":"https://coderefinery.github.io/research-software-engineering/documentation/","rel":["nofollow"]},"children":[{"type":"text","value":"documentation"}]},{"type":"text","value":"."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Additional Research Software Support materials on "},{"type":"element","tag":"a","props":{"href":"https://esciencecenter-digital-skills.github.io/research-software-support/modules/documentation/info","rel":["nofollow"]},"children":[{"type":"text","value":"documentation"}]}]},{"type":"element","tag":"h2","props":{"id":"_3-reproducible-dependencies-and-environments"},"children":[{"type":"text","value":"3. Reproducible dependencies and environments"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Follow the materials and exercises from coderefinery about "},{"type":"element","tag":"a","props":{"href":"https://coderefinery.github.io/research-software-engineering/reproducibility/","rel":["nofollow"]},"children":[{"type":"text","value":"reproducible dependencies and environments"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Additional Research Software Support materials on "},{"type":"element","tag":"a","props":{"href":"https://esciencecenter-digital-skills.github.io/research-software-support/modules/distributing/info","rel":["nofollow"]},"children":[{"type":"text","value":"distributing software"}]}]},{"type":"element","tag":"h2","props":{"id":"_4-testing"},"children":[{"type":"text","value":"4. Testing"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Follow the materials and exercises from coderefinery about "},{"type":"element","tag":"a","props":{"href":"https://coderefinery.github.io/research-software-engineering/testing/","rel":["nofollow"]},"children":[{"type":"text","value":"Testing"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Additional Research Software Support materials on "},{"type":"element","tag":"a","props":{"href":"https://esciencecenter-digital-skills.github.io/research-software-support/modules/testing/info","rel":["nofollow"]},"children":[{"type":"text","value":"testing"}]}]},{"type":"element","tag":"h2","props":{"id":"_5-automation-and-reproducible-workflows"},"children":[{"type":"text","value":"5. Automation and reproducible workflows"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Follow the materials and exercises from coderefinery about "},{"type":"element","tag":"a","props":{"href":"https://coderefinery.github.io/research-software-engineering/automation/","rel":["nofollow"]},"children":[{"type":"text","value":"Automation and reproducible workflows"}]}]},{"type":"element","tag":"h2","props":{"id":"_6-sharing-licensing-and-publishing"},"children":[{"type":"text","value":"6. Sharing (licensing and publishing)"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Follow the materials and exercises from coderefinery about "},{"type":"element","tag":"a","props":{"href":"https://coderefinery.github.io/research-software-engineering/sharing/","rel":["nofollow"]},"children":[{"type":"text","value":"Sharing (licensing and publishing)"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Additional Research Software Support materials on "},{"type":"element","tag":"a","props":{"href":"https://esciencecenter-digital-skills.github.io/research-software-support/modules/licenses/info","rel":["nofollow"]},"children":[{"type":"text","value":"licenses"}]},{"type":"text","value":", "},{"type":"element","tag":"a","props":{"href":"https://esciencecenter-digital-skills.github.io/research-software-support/modules/publication/info","rel":["nofollow"]},"children":[{"type":"text","value":"publication"}]},{"type":"text","value":" and "},{"type":"element","tag":"a","props":{"href":"https://esciencecenter-digital-skills.github.io/research-software-support/modules/citation/info","rel":["nofollow"]},"children":[{"type":"text","value":"citation"}]},{"type":"text","value":","}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"_0-example-project","depth":2,"text":"0. Example project"},{"id":"_1-version-control-and-code-review","depth":2,"text":"1. Version control and code review"},{"id":"_2-documentation","depth":2,"text":"2. Documentation"},{"id":"_3-reproducible-dependencies-and-environments","depth":2,"text":"3. Reproducible dependencies and environments"},{"id":"_4-testing","depth":2,"text":"4. Testing"},{"id":"_5-automation-and-reproducible-workflows","depth":2,"text":"5. Automation and reproducible workflows"},{"id":"_6-sharing-licensing-and-publishing","depth":2,"text":"6. Sharing (licensing and publishing)"}]}},"_type":"markdown","_id":"local_fs:modules:software-development-handson:exercises_good-practices.md","_source":"local_fs","_file":"modules/software-development-handson/exercises_good-practices.md","_stem":"modules/software-development-handson/exercises_good-practices","_extension":"md","plainText":"---\ntitle: Good Practices\ntype: exercise\norder: 3\n---\n\n# Good practices will save the earth!\n\nGood practices in software engineering are essential to reduce energy usage. Without proper (automated) testing, documentation and sharing, resources are wasted constantly. \n\nExamples are:\n- running (and failing) untested or badly tested workflows in high-resource jobs\n- having to redo a lot of work because things are lost as they were not stored/versioned properly\n- having to redo someone elses work because it was not properly published or licensed\n\n[CodeRefinery](https://coderefinery.org/) is a very good resource for learning best practices in programming and data management for research software. Their [full blown course](https://coderefinery.org/lessons/) lasts 6 days and goes fairly deep into the most important aspects of software development. \n\nThe [“CodeRefinery in 1 hour” course](https://coderefinery.github.io/research-software-engineering/) condenses most of the materials in a 1 hours crash-course. For this exercise we will follow the contents of this crash course. Below you will find the links to the six course chapters on various of research software development. \n\nBesides the links to the coderefinery course, in each of the sections below you will also find links to corresponding modules in the [Research Software Support platform.](https://esciencecenter-digital-skills.github.io/research-software-support/). These materials are less hands-on because they are made for research supporters, however they often give you a nice conceptual overview of the concepts. You can regard these as optional additional materials. \n\n## 0. Example project\n\nThe course starts with introducing an example project that will be used throughout the course. \n\nYou can also choose to follow the exercises using your own software project, in that case start with [step 1](#_1-version-control-and-code-review). Throughout the exercises, the example project will be used, we trust you can translate the steps to your own project. If you notice that this doesn't work for you, try using the example project.\n\nIf you want to use the example project, follow the link below and read up on simulating the motion of planets. \n[Example project: simulating the motion of planets](https://coderefinery.github.io/research-software-engineering/example/)\n\n## 1. Version control and code review\n\nFollow the materials and exercises from coderefinery about \n[version control and code review](https://coderefinery.github.io/research-software-engineering/version-control/).\n\nAdditional Research Software Support materials on [software version control](https://esciencecenter-digital-skills.github.io/research-software-support/modules/version-control/info)\n\n## 2. Documentation\n\nFollow the materials and exercises from coderefinery about [documentation](https://coderefinery.github.io/research-software-engineering/documentation/).\n\nAdditional Research Software Support materials on [documentation](https://esciencecenter-digital-skills.github.io/research-software-support/modules/documentation/info)\n\n\n## 3. Reproducible dependencies and environments\n\nFollow the materials and exercises from coderefinery about [reproducible dependencies and environments](https://coderefinery.github.io/research-software-engineering/reproducibility/)\n\nAdditional Research Software Support materials on [distributing software](https://esciencecenter-digital-skills.github.io/research-software-support/modules/distributing/info)\n\n\n## 4. Testing\nFollow the materials and exercises from coderefinery about [Testing](https://coderefinery.github.io/research-software-engineering/testing/)\n\nAdditional Research Software Support materials on [testing](https://esciencecenter-digital-skills.github.io/research-software-support/modules/testing/info)\n\n\n## 5. Automation and reproducible workflows\n\nFollow the materials and exercises from coderefinery about [Automation and reproducible workflows](https://coderefinery.github.io/research-software-engineering/automation/)\n\n## 6. Sharing (licensing and publishing)\n\nFollow the materials and exercises from coderefinery about [Sharing (licensing and publishing)](https://coderefinery.github.io/research-software-engineering/sharing/)\n\nAdditional Research Software Support materials on [licenses](https://esciencecenter-digital-skills.github.io/research-software-support/modules/licenses/info), [publication](https://esciencecenter-digital-skills.github.io/research-software-support/modules/publication/info) and [citation](https://esciencecenter-digital-skills.github.io/research-software-support/modules/citation/info), \n"},{"_path":"/modules/software-development-handson/exercises_cicd","_dir":"software-development-handson","_draft":false,"_partial":false,"_locale":"","title":"CI/CD optimization","description":"","type":"exercise","order":4,"body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"make-your-automated-testing-framework-use-less-energy"},"children":[{"type":"text","value":"Make your automated testing framework use less energy"}]},{"type":"element","tag":"h2","props":{"id":"testing-is-necessary"},"children":[{"type":"text","value":"Testing is necessary"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"A robust testing framework is an essential part of good software development practices. It is even more vital in a research environment since wrong or misleading scientific results may be caused by bad or insufficient testing. Automated testing aids in scientific reproducibility and reduces the amount of time wasted trying to go back to find which version still worked with a given feature."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"If you are unsure about what a testing framework is or how to set one up, you can learn about it in the "},{"type":"element","tag":"a","props":{"href":"exercises_good-practices"},"children":[{"type":"text","value":"Good Practices"}]},{"type":"text","value":" exercises of this hands-on module (specifically, it is "},{"type":"element","tag":"a","props":{"href":"exercises_good-practices#_4-testing"},"children":[{"type":"text","value":"step 4"}]},{"type":"text","value":". Adding tests to your scientific code is a good step towards avoiding wasted energy in the long run."}]},{"type":"element","tag":"h2","props":{"id":"testing-uses-energy"},"children":[{"type":"text","value":"Testing uses energy"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Despite the need for it, testing necessarily uses energy. By adding a testing suite to your software you are making the value judgement that the benefits are worth the additional energy cost of running automatic tests."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"But there are ways to mimimize the amount of energy used.\nThe defaults used by most people when adding automated tests to their code base are often wasteful, due to many tests being run when it is not necessary."}]},{"type":"element","tag":"h2","props":{"id":"reduce-energy-waste-from-unnecessary-testing"},"children":[{"type":"text","value":"Reduce energy waste from unnecessary testing"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In the following we address some relatively simple changes that can be made to reduce the unnecessary running of tests.\nThe solutions are given for projects that use "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"pytest"}]},{"type":"text","value":" (the ubiquitous python testing framework) and automation using features of "},{"type":"element","tag":"a","props":{"href":"www.github.com"},"children":[{"type":"text","value":"GitHub"}]},{"type":"text","value":", which is a very common place to host code repositories. However, if you are using a different language (e.g. "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"R"}]},{"type":"text","value":") or you do not use GitHub (maybe GitLab, bitbucket etc) then the general principle should still apply. It may be possible to recreate the same changes by modifying the relevant configuration (we will try to help where we can)."}]},{"type":"element","tag":"h3","props":{"id":"_1-cancel-running-workflows-on-a-new-push"},"children":[{"type":"text","value":"1. Cancel running workflows on a new push"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"By default, it is often the case that currently running tests continue to completion, even if you have pushed new changes to the branch. While that may be desirable in some cases, it is most often not wanted. The user is most interested in whether the newest version of a branch is passing the tests or not."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Luckily, it is possible to "},{"type":"element","tag":"a","props":{"href":"https://docs.github.com/en/enterprise-cloud@latest/actions/writing-workflows/choosing-what-your-workflow-does/control-the-concurrency-of-workflows-and-jobs#example-using-concurrency-and-the-default-behavior","rel":["nofollow"]},"children":[{"type":"text","value":"automatically cancel running tests if new code is pushed to the branch"}]},{"type":"text","value":"."}]},{"type":"element","tag":"h3","props":{"id":"_2-only-re-run-tests-that-failed"},"children":[{"type":"text","value":"2. Only re-run tests that failed"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Use the "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"pytest --last-failed"}]},{"type":"text","value":" command by exploiting the gh actions cache functionality using a ready-made github action:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"pytest-last-failed: "},{"type":"element","tag":"a","props":{"href":"https://github.com/sjvrijn/pytest-last-failed","rel":["nofollow"]},"children":[{"type":"text","value":"https://github.com/sjvrijn/pytest-last-failed"}]}]}]},{"type":"element","tag":"h3","props":{"id":"_3-set-the-workflow-trigger-appropriately-for-each-part-of-the-test-framework"},"children":[{"type":"text","value":"3. Set the workflow trigger appropriately for each part of the test framework"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Test workflows are triggered to run when a particular event happens. To avoid tests running unnecessarily, it is important to ensure that this trigger is set correctly."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Certain test workflows do not need to run on every push, for example, and could be configured to only run on merges to the main branch (or on tagging releases)."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://docs.github.com/en/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows","rel":["nofollow"]},"children":[{"type":"text","value":"GitHub docs on triggering workflows"}]}]},{"type":"element","tag":"h3","props":{"id":"_4-test-on-different-platformsversions-that-make-sense"},"children":[{"type":"text","value":"4. Test on different platforms/versions that make sense"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"It is possible to run your automated tests on several platforms (e.g. different versions of Ubuntu, MacOS and Windows) and also on different kinds of software stack (different libraries, "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"python"}]},{"type":"text","value":" versions etc.). On GitHub, for example, this can be done using "},{"type":"element","tag":"a","props":{"href":"https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/running-variations-of-jobs-in-a-workflow","rel":["nofollow"]},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"matrix"}]},{"type":"text","value":" strategies"}]},{"type":"text","value":". This is generally desirable, in order to ensure portability across systems."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"However, testing all these combinations comes at a cost. It is important to think about how many users you have (maybe it is just you and some colleagues) and whether what you are testing is actually necessary. For example, supporting every python version from the last 10 years is probably overkill and will waste a lot of energy."}]},{"type":"element","tag":"h3","props":{"id":"_5-create-dependencies-between-tests"},"children":[{"type":"text","value":"5. Create dependencies between tests"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Continuing to run all tests when one has failed does not always make sense. For example, if a basic linting step has failed, it may be desirable not to run the remaining test suite until that is fixed."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"With GitHub actions this is possible by making dependencies between your jobs: "},{"type":"element","tag":"a","props":{"href":"https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/using-jobs-in-a-workflow#example-requiring-successful-dependent-jobs","rel":["nofollow"]},"children":[{"type":"text","value":"see relevant example here"}]},{"type":"text","value":"."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Alterntively, you may wish to only run the linting tests once the basic tests pass (i.e. no point linting broken code). Which way of adding dependencies is best at reducing unnecessary tests running is dependent on your specific setup."}]},{"type":"element","tag":"h3","props":{"id":"other-toolsplugins-worth-a-look"},"children":[{"type":"text","value":"Other tools/plugins worth a look"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"A possible alternative to "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"pytest-last-failed"}]},{"type":"text","value":":"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"pytest-testmon: "},{"type":"element","tag":"a","props":{"href":"https://github.com/tarpas/pytest-testmon","rel":["nofollow"]},"children":[{"type":"text","value":"https://github.com/tarpas/pytest-testmon"}]},{"type":"text","value":", a pytest plugin that only runs tests that concern code that has been affected by changes (interesting but challenging, and possibly unreliable)"}]}]},{"type":"element","tag":"h2","props":{"id":"conclusion"},"children":[{"type":"text","value":"Conclusion"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Testing is essential to reducing waste in research software development, but can cause significant energy consumption itself. This is due to the way most testing frameworks are by default configured to run all of the tests, all of the time. By following some or all of the above changes, you can likely save energy by reducing a lot of pointless tests being run."}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"testing-is-necessary","depth":2,"text":"Testing is necessary"},{"id":"testing-uses-energy","depth":2,"text":"Testing uses energy"},{"id":"reduce-energy-waste-from-unnecessary-testing","depth":2,"text":"Reduce energy waste from unnecessary testing","children":[{"id":"_1-cancel-running-workflows-on-a-new-push","depth":3,"text":"1. Cancel running workflows on a new push"},{"id":"_2-only-re-run-tests-that-failed","depth":3,"text":"2. Only re-run tests that failed"},{"id":"_3-set-the-workflow-trigger-appropriately-for-each-part-of-the-test-framework","depth":3,"text":"3. Set the workflow trigger appropriately for each part of the test framework"},{"id":"_4-test-on-different-platformsversions-that-make-sense","depth":3,"text":"4. Test on different platforms/versions that make sense"},{"id":"_5-create-dependencies-between-tests","depth":3,"text":"5. Create dependencies between tests"},{"id":"other-toolsplugins-worth-a-look","depth":3,"text":"Other tools/plugins worth a look"}]},{"id":"conclusion","depth":2,"text":"Conclusion"}]}},"_type":"markdown","_id":"local_fs:modules:software-development-handson:exercises_cicd.md","_source":"local_fs","_file":"modules/software-development-handson/exercises_cicd.md","_stem":"modules/software-development-handson/exercises_cicd","_extension":"md","plainText":"---\ntitle: CI/CD optimization\ntype: exercise\norder: 4\n---\n\n# Make your automated testing framework use less energy\n\n## Testing is necessary\nA robust testing framework is an essential part of good software development practices. It is even more vital in a research environment since wrong or misleading scientific results may be caused by bad or insufficient testing. Automated testing aids in scientific reproducibility and reduces the amount of time wasted trying to go back to find which version still worked with a given feature.\n\nIf you are unsure about what a testing framework is or how to set one up, you can learn about it in the [Good Practices](exercises_good-practices) exercises of this hands-on module (specifically, it is [step 4](exercises_good-practices#_4-testing). Adding tests to your scientific code is a good step towards avoiding wasted energy in the long run.\n\n\n## Testing uses energy\nDespite the need for it, testing necessarily uses energy. By adding a testing suite to your software you are making the value judgement that the benefits are worth the additional energy cost of running automatic tests.\n\nBut there are ways to mimimize the amount of energy used.\nThe defaults used by most people when adding automated tests to their code base are often wasteful, due to many tests being run when it is not necessary.\n\n## Reduce energy waste from unnecessary testing\nIn the following we address some relatively simple changes that can be made to reduce the unnecessary running of tests.\nThe solutions are given for projects that use `pytest` (the ubiquitous python testing framework) and automation using features of [GitHub](www.github.com), which is a very common place to host code repositories. However, if you are using a different language (e.g. `R`) or you do not use GitHub (maybe GitLab, bitbucket etc) then the general principle should still apply. It may be possible to recreate the same changes by modifying the relevant configuration (we will try to help where we can).\n\n### 1. Cancel running workflows on a new push\nBy default, it is often the case that currently running tests continue to completion, even if you have pushed new changes to the branch. While that may be desirable in some cases, it is most often not wanted. The user is most interested in whether the newest version of a branch is passing the tests or not.\n\nLuckily, it is possible to [automatically cancel running tests if new code is pushed to the branch](https://docs.github.com/en/enterprise-cloud@latest/actions/writing-workflows/choosing-what-your-workflow-does/control-the-concurrency-of-workflows-and-jobs#example-using-concurrency-and-the-default-behavior).\n\n### 2. Only re-run tests that failed\nUse the `pytest --last-failed` command by exploiting the gh actions cache functionality using a ready-made github action:\n* pytest-last-failed: <https://github.com/sjvrijn/pytest-last-failed>\n\n### 3. Set the workflow trigger appropriately for each part of the test framework\nTest workflows are triggered to run when a particular event happens. To avoid tests running unnecessarily, it is important to ensure that this trigger is set correctly.\n\nCertain test workflows do not need to run on every push, for example, and could be configured to only run on merges to the main branch (or on tagging releases).\n\n[GitHub docs on triggering workflows](https://docs.github.com/en/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows)\n\n\n### 4. Test on different platforms/versions that make sense\nIt is possible to run your automated tests on several platforms (e.g. different versions of Ubuntu, MacOS and Windows) and also on different kinds of software stack (different libraries, `python` versions etc.). On GitHub, for example, this can be done using [`matrix` strategies](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/running-variations-of-jobs-in-a-workflow). This is generally desirable, in order to ensure portability across systems.\n\nHowever, testing all these combinations comes at a cost. It is important to think about how many users you have (maybe it is just you and some colleagues) and whether what you are testing is actually necessary. For example, supporting every python version from the last 10 years is probably overkill and will waste a lot of energy.\n\n\n### 5. Create dependencies between tests\n\nContinuing to run all tests when one has failed does not always make sense. For example, if a basic linting step has failed, it may be desirable not to run the remaining test suite until that is fixed.\n\nWith GitHub actions this is possible by making dependencies between your jobs: [see relevant example here](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/using-jobs-in-a-workflow#example-requiring-successful-dependent-jobs).\n\nAlterntively, you may wish to only run the linting tests once the basic tests pass (i.e. no point linting broken code). Which way of adding dependencies is best at reducing unnecessary tests running is dependent on your specific setup.\n\n\n### Other tools/plugins worth a look\n\nA possible alternative to `pytest-last-failed`:\n* pytest-testmon: <https://github.com/tarpas/pytest-testmon>, a pytest plugin that only runs tests that concern code that has been affected by changes (interesting but challenging, and possibly unreliable)\n\n\n## Conclusion\nTesting is essential to reducing waste in research software development, but can cause significant energy consumption itself. This is due to the way most testing frameworks are by default configured to run all of the tests, all of the time. By following some or all of the above changes, you can likely save energy by reducing a lot of pointless tests being run.\n\n"},{"_path":"/modules/software-development-handson/exercises_codecarbon","_dir":"software-development-handson","_draft":false,"_partial":false,"_locale":"","title":"Code Carbon","description":"","type":"exercise","order":5,"body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"codecarbon"},"children":[{"type":"text","value":"CodeCarbon"}]},{"type":"element","tag":"h2","props":{"id":"introduction"},"children":[{"type":"text","value":"Introduction"}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"An important step in trying to improve the energy efficiency of your\nsoftware is to measure the actual energy consumed during the execution\nof your code."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"There are a handful of open-source software packages available online\nto measure the energy consumption of a piece of code, including\n"},{"type":"element","tag":"a","props":{"href":"https://github.com/powerapi-ng/powerapi","rel":["nofollow"]},"children":[{"type":"text","value":"PowerAPI"}]},{"type":"text","value":",\n"},{"type":"element","tag":"a","props":{"href":"https://github.com/energymon/energymon","rel":["nofollow"]},"children":[{"type":"text","value":"EnergyMon"}]},{"type":"text","value":" or\n"},{"type":"element","tag":"a","props":{"href":"https://git.astron.nl/RD/pmt","rel":["nofollow"]},"children":[{"type":"text","value":"PMT"}]},{"type":"text","value":". In this hands-on exercice, we\nwill focus on "},{"type":"element","tag":"a","props":{"href":"https://codecarbon.io/","rel":["nofollow"]},"children":[{"type":"text","value":"CodeCarbon"}]},{"type":"text","value":", a Python package\nreadily available on Linux, Windows and MacOS."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"We will start by testing CodeCarbon on a simple example\ncode provided below, then provide guidance on how to test a snippet\nof your own code. For the later, we advise selecting a well-contained, single-purpose\nfunction at first and progressively extend to larger and more complex\nworkflows. The runtime of your selected function/program should be\nof the order of ~10s since CodeCarbon is not designed for high frequency\nmeasurments."}]},{"type":"element","tag":"h3","props":{"id":"prerequisite"},"children":[{"type":"text","value":"Prerequisite"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"a working knowledge of Python. See "},{"type":"element","tag":"a","props":{"href":"https://swcarpentry.github.io/python-novice-inflammation/index.html","rel":["nofollow"]},"children":[{"type":"text","value":"Python Carpentries"}]},{"type":"text","value":" for a quick introduction."}]}]},{"type":"element","tag":"h2","props":{"id":"installing-codecarbon"},"children":[{"type":"text","value":"Installing CodeCarbon"}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Code Carbon is written in Python and brings a number of dependencies.\nIt is recommended to setup a dedicated environment using a package\nand environment management tool such as "},{"type":"element","tag":"a","props":{"href":"https://docs.conda.io/projects/conda/en/latest/user-guide/getting-started.html","rel":["nofollow"]},"children":[{"type":"text","value":"Conda"}]},{"type":"text","value":" to avoid disrupting the packages currently available\non your computer. However, this step is not mandatory."}]},{"type":"element","tag":"h3","props":{"id":"on-macos-and-linux"},"children":[{"type":"text","value":"On MacOS and Linux:"}]},{"type":"element","tag":"h4","props":{"id":"using-conda"},"children":[{"type":"text","value":"Using Conda:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Create a new Conda environment:"}]},{"type":"element","tag":"pre","props":{"code":"conda create -n greencomputing python=3.12 \n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"conda create -n greencomputing python=3.12 \n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Activate the new environment:"}]},{"type":"element","tag":"pre","props":{"code":"conda activate greencomputing\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"conda activate greencomputing\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Use the package manager 'pip' to get CodeCarbon (and its dependencies):"}]},{"type":"element","tag":"pre","props":{"code":"pip install codecarbon\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"pip install codecarbon\n"}]}]},{"type":"element","tag":"h4","props":{"id":"without-environment-manager"},"children":[{"type":"text","value":"Without environment manager:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In this case, we assume that Python is already available on your computer."}]},{"type":"element","tag":"pre","props":{"code":"python -m pip install codecarbon\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"python -m pip install codecarbon\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To check that CodeCarbon is effectively installed, try the following command:"}]},{"type":"element","tag":"pre","props":{"code":"python -c \"from codecarbon import OfflineEmissionsTracker; print('SUCCESS')\"\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"python -c \"from codecarbon import OfflineEmissionsTracker; print('SUCCESS')\"\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"If CodeCarbon was successfully installed, the command will simply return 'SUCCESS'."}]},{"type":"element","tag":"h3","props":{"id":"on-windows"},"children":[{"type":"text","value":"On Windows"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The above installation instructions should work on Windows if using "},{"type":"element","tag":"a","props":{"href":"https://learn.microsoft.com/en-us/windows/wsl/install","rel":["nofollow"]},"children":[{"type":"text","value":"WSL"}]},{"type":"text","value":"."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"If not, it is generally easiest to install python packages using conda which can be installed according to "},{"type":"element","tag":"a","props":{"href":"https://docs.conda.io/projects/conda/en/latest/user-guide/install/windows.html","rel":["nofollow"]},"children":[{"type":"text","value":"these instructions"}]},{"type":"text","value":"."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"If you have another setup or requirements then please ask - we will do our best to help you get set up!"}]},{"type":"element","tag":"h2","props":{"id":"using-codecarbon-a-first-example"},"children":[{"type":"text","value":"Using CodeCarbon: a first example"}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The test case consists in computing the Euclidian distance\nbetween all the points contained in a list, where each point is defined by\ntwo coordinates. To illustrate how changes to the code can impact the energy consumption,\ntwo implementations of the computation are provided: a naive version\nrelying on Python's list and a version using Numpy. The code can\nbe obtained "},{"type":"element","tag":"a","props":{"href":"/modules/software-development-handson/media/EuclidianDistance.py","target":"_blank"},"children":[{"type":"text","value":"here"}]},{"type":"text","value":"."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Let's now write a small Python driver to execute the computation\nand measure the energy consumption."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"We will start by importing the Python modules needed. In a new\npython file (e.g. EDCodeCarbonTest.py), write the following:"}]},{"type":"element","tag":"pre","props":{"code":"import random\nimport numpy as np\nfrom EuclidianDistance import get_distances\nfrom codecarbon import OfflineEmissionsTracker \n","filename":"EDCodeCarbonTest.py","highlights":[4,5,6,7],"language":"python","meta":"meta-info=val","className":["language-python"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"import random\nimport numpy as np\nfrom EuclidianDistance import get_distances\nfrom codecarbon import OfflineEmissionsTracker \n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The first two modules are needed in order to generate data. From the\ncode provided above, we will use the "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"get_distances"}]},{"type":"text","value":" function, and\nfinally we will use CodeCarbon's "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"OfflineEmissionsTracker"}]},{"type":"text","value":".\nNote that CodeCarbon can also be used "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Online"}]},{"type":"text","value":", allowing live access to\ncarbon intensity data and a dashboard, but the setup is more complicated."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Once the modules are loaded, we can write the main function of our program,\nappending to the file created above:"}]},{"type":"element","tag":"pre","props":{"code":"if __name__ == \"__main__\":\n    # Prepare a list of coordinates\n    # Define the list length\n    n_npts = 20000\n\n    # Get Numpy's random number generator with a fixed seed\n    rng = np.random.default_rng(12345)\n\n    # Populate the list, with coordinates uniformly sampled\n    # in the [0,1] interval.\n    points = []\n    for _ in range(n_npts):\n        points.append((rng.uniform(0.0, 1.0), rng.uniform(0.0, 1.0)))\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"if __name__ == \"__main__\":\n    # Prepare a list of coordinates\n    # Define the list length\n    n_npts = 20000\n\n    # Get Numpy's random number generator with a fixed seed\n    rng = np.random.default_rng(12345)\n\n    # Populate the list, with coordinates uniformly sampled\n    # in the [0,1] interval.\n    points = []\n    for _ in range(n_npts):\n        points.append((rng.uniform(0.0, 1.0), rng.uniform(0.0, 1.0)))\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"We now have a list of points to pass to the "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"get_distances"}]},{"type":"text","value":" function.\nBut we first need to initialize CodeCarbon emission tracker. In this example,\nwe will use a context manager such as:"}]},{"type":"element","tag":"pre","props":{"code":"    with OfflineEmissionsTracker(country_iso_code=\"NLD\",\n                                 measure_power_secs=5) as tracker:\n        >> compute intensive code ...\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"    with OfflineEmissionsTracker(country_iso_code=\"NLD\",\n                                 measure_power_secs=5) as tracker:\n        >> compute intensive code ...\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"where the "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"tracker"}]},{"type":"text","value":" will directly start and report energy consumption as\nwe execute the code. There are numerous runtime options available when\ninitializing the "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"OfflineEmissionsTracker"}]},{"type":"text","value":", refers to CodeCarbon\n"},{"type":"element","tag":"a","props":{"href":"https://mlco2.github.io/codecarbon/parameters.html","rel":["nofollow"]},"children":[{"type":"text","value":"documentation"}]},{"type":"text","value":" for a complete\noverview. In the example above we only provided the Netherlands ISO 3 letters code,\nand the interval (in seconds) to measure hardware power usage.\nLet's now add our actual computation in the code as follows:"}]},{"type":"element","tag":"pre","props":{"code":"    with OfflineEmissionsTracker(country_iso_code=\"NLD\",\n                                 measure_power_secs=5) as tracker:\n        get_distances(points, \"base\")\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"    with OfflineEmissionsTracker(country_iso_code=\"NLD\",\n                                 measure_power_secs=5) as tracker:\n        get_distances(points, \"base\")\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"where we use the base implementation of the Euclidean distance calculation. It is now\ntime to run the program."}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{"className":[],"style":"color: darkred;"},"children":[{"type":"text","value":"Note"}]},{"type":"text","value":": On MacOS, CodeCarbon relies on PowerMetrics to access hardware power data, thus requiring root/sudo access. You will be prompted for your login password"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The actual output of running the Python program will depend on your platform and hardware,\nbut it will resemble the following (here on MacOS):"}]},{"type":"element","tag":"pre","props":{"code":"[...] [setup] RAM Tracking...\n[...] [setup] GPU Tracking...\n[...] No GPU found.\n[...] [setup] CPU Tracking...\n[...] Tracking Apple CPU and GPU via PowerMetrics\n[...] >>> Tracker's metadata:\n[...]   Platform system: macOS-14.6.1-arm64-arm-64bit\n[...]   Python version: 3.12.7\n[...]   CodeCarbon version: 2.7.1\n[...]   Available RAM : 24.000 GB\n[...]   CPU count: 8\n[...]   CPU model: Apple M2\n[...]   GPU count: 1\n[...]   GPU model: Apple M2\n[...] Saving emissions data to file ./NLeSC/Training/CodeCarbon/emissions.csv\n[...] Energy consumed for RAM : 0.000013 kWh. RAM Power : 9.000000000000002 W\n[...] Energy consumed for all CPUs : 0.000010 kWh. Total CPU Power : 7.500399999999999 W\n[...] Energy consumed for all GPUs : 0.000000 kWh. Total GPU Power : 0.001 W\n[...] Energy consumed for RAM : 0.000038 kWh. RAM Power : 9.000000000000002 W\n[...] 0.000048 kWh of electricity used since the beginning.\n[...] Energy consumed for all CPUs : 0.000033 kWh. Total CPU Power : 8.2367 W\n[...] Energy consumed for all GPUs : 0.000000 kWh. Total GPU Power : 0.002 W\n[...] Energy consumed for RAM : 0.000048 kWh. RAM Power : 9.000000000000002 W\n[...] ...\n[...] 0.000321 kWh of electricity used since the beginning.\n[...] 0.000890 g.CO2eq/s mean an estimation of 28.064960638276645 kg.CO2eq/year\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"[...] [setup] RAM Tracking...\n[...] [setup] GPU Tracking...\n[...] No GPU found.\n[...] [setup] CPU Tracking...\n[...] Tracking Apple CPU and GPU via PowerMetrics\n[...] >>> Tracker's metadata:\n[...]   Platform system: macOS-14.6.1-arm64-arm-64bit\n[...]   Python version: 3.12.7\n[...]   CodeCarbon version: 2.7.1\n[...]   Available RAM : 24.000 GB\n[...]   CPU count: 8\n[...]   CPU model: Apple M2\n[...]   GPU count: 1\n[...]   GPU model: Apple M2\n[...] Saving emissions data to file ./NLeSC/Training/CodeCarbon/emissions.csv\n[...] Energy consumed for RAM : 0.000013 kWh. RAM Power : 9.000000000000002 W\n[...] Energy consumed for all CPUs : 0.000010 kWh. Total CPU Power : 7.500399999999999 W\n[...] Energy consumed for all GPUs : 0.000000 kWh. Total GPU Power : 0.001 W\n[...] Energy consumed for RAM : 0.000038 kWh. RAM Power : 9.000000000000002 W\n[...] 0.000048 kWh of electricity used since the beginning.\n[...] Energy consumed for all CPUs : 0.000033 kWh. Total CPU Power : 8.2367 W\n[...] Energy consumed for all GPUs : 0.000000 kWh. Total GPU Power : 0.002 W\n[...] Energy consumed for RAM : 0.000048 kWh. RAM Power : 9.000000000000002 W\n[...] ...\n[...] 0.000321 kWh of electricity used since the beginning.\n[...] 0.000890 g.CO2eq/s mean an estimation of 28.064960638276645 kg.CO2eq/year\n"}]}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{"className":[],"style":"color: darkred;"},"children":[{"type":"text","value":"Note"}]},{"type":"text","value":": If the CPU on your system is not recognized by CodeCarbon, a default CPU will be used but the code will issue Warnings."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"At time interval specified when initializing the "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"OfflineEmissionsTracker"}]},{"type":"text","value":", power and energy\nare reported for the various hardware. Based on the country code provided, an estimate of\nthe CO2eq emission rate is also reported at the end. As you can see, a constant 9W power is used for the RAM here, whereas\nsmall fluctuations are observed on the CPU side. Even though the RAM and CPU are shared with other programs running\non your computer, CodeCarbon assign their full usage to the measured code. A more accurate measurement of the specific\nprocess CPU usage can be obtained by providing an extra argument to the tracker initialization, "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"tracking_mode = \"process\""}]},{"type":"text","value":".\nHowever, this method does not provide a good measurement of the memory power."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Let's now switch to the Numpy version of program by updating the call to the "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"get_distances"}]},{"type":"text","value":" function:"}]},{"type":"element","tag":"pre","props":{"code":"        get_distances(points, \"numpy\")\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"        get_distances(points, \"numpy\")\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"And re-run the program. The measured energy consumption for thid case is 0.000194 kWh, for an estimated\nemission rate of 0.000538 g.CO2eq/s.\nThis small example demonstrate how by relying on a more efficient implementation, the energy consumption and associated\nemissions can be reduced, mostly due to a shorter runtime. Feel free to experiment with the following:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"changing problem size"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"update the parameters of the "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"OfflineEmissionsTracker"}]},{"type":"text","value":", changing the country code for instance"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"try an alternative implementation of the distance computation"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"add timers to the script to estimate if the average power, is it changing between the two provided implementation ?"}]}]},{"type":"element","tag":"h2","props":{"id":"using-codecarbon-your-own-code"},"children":[{"type":"text","value":"Using CodeCarbon: your own code"}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"If your target code is based on Python, the simplest way to adapt the small example provided above to\nyour case is wrap your entire program into a single function call and replace the "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"get_distances"}]},{"type":"text","value":" function\nby your own."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"An alternate solution, applicable to softwares written in other programming language such as R or C++, is to\nrely on Python subprocess. In the following, let's assume that you have an executable R file (i.e.\nwith "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"#! /usr/bin/Rscript"}]},{"type":"text","value":" on the first line)."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Create a new python file (e.g. CodeCarbonWrap.py), with the following imports:"}]},{"type":"element","tag":"pre","props":{"code":"import subprocess\nfrom codecarbon import OfflineEmissionsTracker\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"import subprocess\nfrom codecarbon import OfflineEmissionsTracker\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"and the following main function:"}]},{"type":"element","tag":"pre","props":{"code":"if __name__ == \"__main__\":\n    with OfflineEmissionsTracker(country_iso_code=\"NLD\",\n                                 measure_power_secs=5) as tracker:                                                                                 \n        subprocess.call ([\"/usr/bin/Rscript\", \"--vanilla\", \"/pathto/MyrScript.r\"])\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"if __name__ == \"__main__\":\n    with OfflineEmissionsTracker(country_iso_code=\"NLD\",\n                                 measure_power_secs=5) as tracker:                                                                                 \n        subprocess.call ([\"/usr/bin/Rscript\", \"--vanilla\", \"/pathto/MyrScript.r\"])\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Note that because the script R script is executed in an external process, the option "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"tracking_mode = \"process\""}]},{"type":"text","value":"\nis no longer adapted and only the mode where the CPU usage of the entire computer is measured is relevant. You\nshould thus be aware of the other programs running on your computer (e.g. a web brower with video streaming) as their\nCPU usage will be measured as well, and for more accurate measurements those programs should be terminated."}]},{"type":"element","tag":"h2","props":{"id":"conclusion"},"children":[{"type":"text","value":"Conclusion"}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In this short tutorial, you have tested first-hand how to measure the energy consumption of a piece of code\nusing "},{"type":"element","tag":"a","props":{"href":"https://codecarbon.io/","rel":["nofollow"]},"children":[{"type":"text","value":"CodeCarbon"}]},{"type":"text","value":". CodeCarbon can be deployed on larger application as well as\non HPC platforms.\nAlthough written in Python, CodeCarbon can be used for any other languages as long as you are able to use\nPython subprocess to execute the external program (i.e. R, C++, Fortran, ...)."}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"introduction","depth":2,"text":"Introduction","children":[{"id":"prerequisite","depth":3,"text":"Prerequisite"}]},{"id":"installing-codecarbon","depth":2,"text":"Installing CodeCarbon","children":[{"id":"on-macos-and-linux","depth":3,"text":"On MacOS and Linux:"},{"id":"on-windows","depth":3,"text":"On Windows"}]},{"id":"using-codecarbon-a-first-example","depth":2,"text":"Using CodeCarbon: a first example"},{"id":"using-codecarbon-your-own-code","depth":2,"text":"Using CodeCarbon: your own code"},{"id":"conclusion","depth":2,"text":"Conclusion"}]}},"_type":"markdown","_id":"local_fs:modules:software-development-handson:exercises_codecarbon.md","_source":"local_fs","_file":"modules/software-development-handson/exercises_codecarbon.md","_stem":"modules/software-development-handson/exercises_codecarbon","_extension":"md","plainText":"---\ntitle: Code Carbon\ntype: exercise\norder: 5\n---\n\n# CodeCarbon\n\n## Introduction\n---------------\n\nAn important step in trying to improve the energy efficiency of your\nsoftware is to measure the actual energy consumed during the execution\nof your code.\n\nThere are a handful of open-source software packages available online\nto measure the energy consumption of a piece of code, including \n[PowerAPI](https://github.com/powerapi-ng/powerapi),\n[EnergyMon](https://github.com/energymon/energymon) or\n[PMT](https://git.astron.nl/RD/pmt). In this hands-on exercice, we \nwill focus on [CodeCarbon](https://codecarbon.io/), a Python package\nreadily available on Linux, Windows and MacOS.\n\nWe will start by testing CodeCarbon on a simple example\ncode provided below, then provide guidance on how to test a snippet\nof your own code. For the later, we advise selecting a well-contained, single-purpose\nfunction at first and progressively extend to larger and more complex\nworkflows. The runtime of your selected function/program should be\nof the order of ~10s since CodeCarbon is not designed for high frequency\nmeasurments.\n\n### Prerequisite\n\n - a working knowledge of Python. See [Python Carpentries](https://swcarpentry.github.io/python-novice-inflammation/index.html) for a quick introduction.\n\n## Installing CodeCarbon\n------------------------\n\nCode Carbon is written in Python and brings a number of dependencies.\nIt is recommended to setup a dedicated environment using a package\nand environment management tool such as [Conda](https://docs.conda.io/projects/conda/en/latest/user-guide/getting-started.html) to avoid disrupting the packages currently available\non your computer. However, this step is not mandatory.\n\n### On MacOS and Linux:\n\n#### Using Conda:\n\nCreate a new Conda environment:\n```\nconda create -n greencomputing python=3.12 \n```\n\nActivate the new environment:\n```\nconda activate greencomputing\n```\n\nUse the package manager 'pip' to get CodeCarbon (and its dependencies):\n```\npip install codecarbon\n```\n\n#### Without environment manager:\n\nIn this case, we assume that Python is already available on your computer.\n```\npython -m pip install codecarbon\n```\n\nTo check that CodeCarbon is effectively installed, try the following command:\n```\npython -c \"from codecarbon import OfflineEmissionsTracker; print('SUCCESS')\"\n```\nIf CodeCarbon was successfully installed, the command will simply return 'SUCCESS'.\n\n\n### On Windows\n\nThe above installation instructions should work on Windows if using [WSL](https://learn.microsoft.com/en-us/windows/wsl/install).\n\nIf not, it is generally easiest to install python packages using conda which can be installed according to [these instructions](https://docs.conda.io/projects/conda/en/latest/user-guide/install/windows.html).\n\nIf you have another setup or requirements then please ask - we will do our best to help you get set up!\n\n\n## Using CodeCarbon: a first example\n------------------------------------\n\nThe test case consists in computing the Euclidian distance\nbetween all the points contained in a list, where each point is defined by\ntwo coordinates. To illustrate how changes to the code can impact the energy consumption,\ntwo implementations of the computation are provided: a naive version\nrelying on Python's list and a version using Numpy. The code can\nbe obtained [here](media/EuclidianDistance.py).\n\nLet's now write a small Python driver to execute the computation\nand measure the energy consumption.\n\nWe will start by importing the Python modules needed. In a new\npython file (e.g. EDCodeCarbonTest.py), write the following:\n```python [EDCodeCarbonTest.py]{4-6,7} meta-info=val\nimport random\nimport numpy as np\nfrom EuclidianDistance import get_distances\nfrom codecarbon import OfflineEmissionsTracker \n```\n\nThe first two modules are needed in order to generate data. From the\ncode provided above, we will use the ```get_distances``` function, and\nfinally we will use CodeCarbon's ```OfflineEmissionsTracker```.\nNote that CodeCarbon can also be used ```Online```, allowing live access to\ncarbon intensity data and a dashboard, but the setup is more complicated.\n\nOnce the modules are loaded, we can write the main function of our program,\nappending to the file created above:\n```\nif __name__ == \"__main__\":\n    # Prepare a list of coordinates\n    # Define the list length\n    n_npts = 20000\n\n    # Get Numpy's random number generator with a fixed seed\n    rng = np.random.default_rng(12345)\n\n    # Populate the list, with coordinates uniformly sampled\n    # in the [0,1] interval.\n    points = []\n    for _ in range(n_npts):\n        points.append((rng.uniform(0.0, 1.0), rng.uniform(0.0, 1.0)))\n```\n\nWe now have a list of points to pass to the ```get_distances``` function.\nBut we first need to initialize CodeCarbon emission tracker. In this example,\nwe will use a context manager such as:\n```\n    with OfflineEmissionsTracker(country_iso_code=\"NLD\",\n                                 measure_power_secs=5) as tracker:\n        >> compute intensive code ...\n```\nwhere the ```tracker``` will directly start and report energy consumption as\nwe execute the code. There are numerous runtime options available when\ninitializing the ```OfflineEmissionsTracker```, refers to CodeCarbon\n[documentation](https://mlco2.github.io/codecarbon/parameters.html) for a complete\noverview. In the example above we only provided the Netherlands ISO 3 letters code,\nand the interval (in seconds) to measure hardware power usage.\nLet's now add our actual computation in the code as follows:\n```\n    with OfflineEmissionsTracker(country_iso_code=\"NLD\",\n                                 measure_power_secs=5) as tracker:\n        get_distances(points, \"base\")\n```\nwhere we use the base implementation of the Euclidean distance calculation. It is now\ntime to run the program.\n\n> `Note`{style=\"color: darkred;\"}: On MacOS, CodeCarbon relies on PowerMetrics to access hardware power data, thus requiring root/sudo access. You will be prompted for your login password\n\n\nThe actual output of running the Python program will depend on your platform and hardware,\nbut it will resemble the following (here on MacOS):\n```\n[...] [setup] RAM Tracking...\n[...] [setup] GPU Tracking...\n[...] No GPU found.\n[...] [setup] CPU Tracking...\n[...] Tracking Apple CPU and GPU via PowerMetrics\n[...] >>> Tracker's metadata:\n[...]   Platform system: macOS-14.6.1-arm64-arm-64bit\n[...]   Python version: 3.12.7\n[...]   CodeCarbon version: 2.7.1\n[...]   Available RAM : 24.000 GB\n[...]   CPU count: 8\n[...]   CPU model: Apple M2\n[...]   GPU count: 1\n[...]   GPU model: Apple M2\n[...] Saving emissions data to file ./NLeSC/Training/CodeCarbon/emissions.csv\n[...] Energy consumed for RAM : 0.000013 kWh. RAM Power : 9.000000000000002 W\n[...] Energy consumed for all CPUs : 0.000010 kWh. Total CPU Power : 7.500399999999999 W\n[...] Energy consumed for all GPUs : 0.000000 kWh. Total GPU Power : 0.001 W\n[...] Energy consumed for RAM : 0.000038 kWh. RAM Power : 9.000000000000002 W\n[...] 0.000048 kWh of electricity used since the beginning.\n[...] Energy consumed for all CPUs : 0.000033 kWh. Total CPU Power : 8.2367 W\n[...] Energy consumed for all GPUs : 0.000000 kWh. Total GPU Power : 0.002 W\n[...] Energy consumed for RAM : 0.000048 kWh. RAM Power : 9.000000000000002 W\n[...] ...\n[...] 0.000321 kWh of electricity used since the beginning.\n[...] 0.000890 g.CO2eq/s mean an estimation of 28.064960638276645 kg.CO2eq/year\n```\n\n> `Note`{style=\"color: darkred;\"}: If the CPU on your system is not recognized by CodeCarbon, a default CPU will be used but the code will issue Warnings.\n\nAt time interval specified when initializing the ```OfflineEmissionsTracker```, power and energy\nare reported for the various hardware. Based on the country code provided, an estimate of\nthe CO2eq emission rate is also reported at the end. As you can see, a constant 9W power is used for the RAM here, whereas\nsmall fluctuations are observed on the CPU side. Even though the RAM and CPU are shared with other programs running\non your computer, CodeCarbon assign their full usage to the measured code. A more accurate measurement of the specific\nprocess CPU usage can be obtained by providing an extra argument to the tracker initialization, ```tracking_mode = \"process\"```.\nHowever, this method does not provide a good measurement of the memory power.\n\nLet's now switch to the Numpy version of program by updating the call to the ```get_distances``` function:\n```\n        get_distances(points, \"numpy\")\n```\nAnd re-run the program. The measured energy consumption for thid case is 0.000194 kWh, for an estimated\nemission rate of 0.000538 g.CO2eq/s.\nThis small example demonstrate how by relying on a more efficient implementation, the energy consumption and associated\nemissions can be reduced, mostly due to a shorter runtime. Feel free to experiment with the following:\n - changing problem size\n - update the parameters of the ```OfflineEmissionsTracker```, changing the country code for instance\n - try an alternative implementation of the distance computation\n - add timers to the script to estimate if the average power, is it changing between the two provided implementation ?\n\n## Using CodeCarbon: your own code\n----------------------------------\nIf your target code is based on Python, the simplest way to adapt the small example provided above to\nyour case is wrap your entire program into a single function call and replace the ```get_distances``` function\nby your own.\n\nAn alternate solution, applicable to softwares written in other programming language such as R or C++, is to\nrely on Python subprocess. In the following, let's assume that you have an executable R file (i.e.\nwith ```#! /usr/bin/Rscript``` on the first line).\n\nCreate a new python file (e.g. CodeCarbonWrap.py), with the following imports:\n```\nimport subprocess\nfrom codecarbon import OfflineEmissionsTracker\n```\nand the following main function:\n\n```\nif __name__ == \"__main__\":\n    with OfflineEmissionsTracker(country_iso_code=\"NLD\",\n                                 measure_power_secs=5) as tracker:                                                                                 \n        subprocess.call ([\"/usr/bin/Rscript\", \"--vanilla\", \"/pathto/MyrScript.r\"])\n```\nNote that because the script R script is executed in an external process, the option ```tracking_mode = \"process\"```\nis no longer adapted and only the mode where the CPU usage of the entire computer is measured is relevant. You\nshould thus be aware of the other programs running on your computer (e.g. a web brower with video streaming) as their\nCPU usage will be measured as well, and for more accurate measurements those programs should be terminated.\n\n## Conclusion\n-------------\n\nIn this short tutorial, you have tested first-hand how to measure the energy consumption of a piece of code\nusing [CodeCarbon](https://codecarbon.io/). CodeCarbon can be deployed on larger application as well as\non HPC platforms.\nAlthough written in Python, CodeCarbon can be used for any other languages as long as you are able to use\nPython subprocess to execute the external program (i.e. R, C++, Fortran, ...).\n"},{"_path":"/modules/software-development-handson/further_reading_module1","_dir":"software-development-handson","_draft":false,"_partial":false,"_locale":"","title":"Extra material","description":"","type":"reading","order":6,"body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"courses-in-green-computing-that-could-be-of-interest"},"children":[{"type":"text","value":"Courses in \"Green\" computing that could be of interest"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://research.vu.nl/en/courses/green-lab-4","rel":["nofollow"]},"children":[{"type":"text","value":"https://research.vu.nl/en/courses/green-lab-4"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://training.linuxfoundation.org/training/green-software-for-practitioners-lfc131/","rel":["nofollow"]},"children":[{"type":"text","value":"https://training.linuxfoundation.org/training/green-software-for-practitioners-lfc131/"}]}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"courses-in-green-computing-that-could-be-of-interest","depth":2,"text":"Courses in \"Green\" computing that could be of interest"}]}},"_type":"markdown","_id":"local_fs:modules:software-development-handson:further_reading_module1.md","_source":"local_fs","_file":"modules/software-development-handson/further_reading_module1.md","_stem":"modules/software-development-handson/further_reading_module1","_extension":"md","plainText":"---\ntitle: Extra material\ntype: reading\norder: 6\n---\n\n## Courses in \"Green\" computing that could be of interest\n* <https://research.vu.nl/en/courses/green-lab-4>\n* <https://training.linuxfoundation.org/training/green-software-for-practitioners-lfc131/>\n"}]