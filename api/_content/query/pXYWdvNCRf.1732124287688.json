[{"_path":"/modules/hpc-handson/introduction","_dir":"hpc-handson","_draft":false,"_partial":false,"_locale":"","title":"Introduction","description":"","type":"reading","order":3,"_type":"markdown","_id":"local_fs:modules:hpc-handson:introduction.md","_source":"local_fs","_file":"modules/hpc-handson/introduction.md","_stem":"modules/hpc-handson/introduction","_extension":"md","plainText":"---\ntitle: Introduction\ntype: reading\norder: 3\n---\n\n# Energy Aware Runtime (EAR) Monitoring Tutorial\n\n>EAR documentation for use on Snellius here: https://servicedesk.surf.nl/wiki/pages/viewpage.action?pageId=62226671\n>\n>EAR full documentation can be found here https://gitlab.bsc.es/ear_team/ear/-/wikis/home\n\n# Section Outline\n\n1. [Introduction](introduction)\n2. [EARL](earl)\n3. [Tools](tools)\n4. [Exercises](exercises)\n\n## Introduction\n\nThe Energy Aware Runtime (EAR) package provides an energy management framework for super computers. This tutorial covers the \"end-user\" experience with EAR.\n\nEAR usage on Snellius can be decomposed into two \"services.\" \n\n1. The EAR library (EARL): EARL is loaded (at runtime) when launching an application through the EAR Loader (EARLO) and SLURM plugin (EARPLUG). The EARL provides functionality to monitor energy (and performance) metrics of an application and additionally the ability to select the optimal CPU frequency according to the application and the node characteristics. \n\n2. Tools: Which include Job accounting (via the command eacct) which queries energy information of a particular job or list of jobs from the the EAR database (EAR DB) on Snellius.\n\n![EAR_configuration](media/EAR_config.png)\n\n### EARD: Node Manager\nThe node daemon is the component in charge of providing any kind of services that requires privileged capabilities. Current version is conceived as an external process executed with root privileges.\nThe EARD provides the following services, each one covered by one thread:\n\nProvides privileged metrics to EARL such as the average frequency, uncore integrated memory controller counters to compute the memory bandwidth, as well as energy metrics (DC node, DRAM and package energy).\nImplements a periodic power monitoring service. This service allows EAR package to control the total energy consumed in the system.\nOffers a remote API used by EARplug, EARGM and EAR commands. This API accepts requests such as get the system status, change policy settings or notify new job/end job events.\n"},{"_path":"/modules/hpc-handson/tools","_dir":"hpc-handson","_draft":false,"_partial":false,"_locale":"","title":"EAR Tools","description":"EAR is available on Snellius as a module","type":"reading","order":5,"_type":"markdown","_id":"local_fs:modules:hpc-handson:tools.md","_source":"local_fs","_file":"modules/hpc-handson/tools.md","_stem":"modules/hpc-handson/tools","_extension":"md","plainText":"---\ntitle: EAR Tools\ntype: reading\norder: 5\n---\n\n\n# EAR Tools\n\nEAR is available on Snellius as a module\n```\nmodule load 2022\nmodule load ear\n```\n### Job accounting (eacct)\nThe eacct command shows accounting information stored in the EAR DB for jobs (and step) IDs. The command uses EARâ€™s configuration file to determine if the user running it is privileged or not, as non-privileged users can only access their information. It provides the following options. The ear module needs to be loaded to use the eacct command.\n\neacct example usage\nThe basic usage of eacct retrieves the last 20 applications (by default) of the user executing it. The default behavior shows data from each job-step, aggregating the values from each node in said job-step. If using SLURM as a job manager, a sbatch job-step is created with the data from the entire execution. A specific job may be specified with -j option:\n\nDefault: Show the last 20 jobs (maximum) executed by the user.\n```\neacct\n```\nQuery a specific job\n```\neacct -J 123456789\n```\nQuery a specific job-step\n```\neacct -J 123456789.0\n```\nShow metrics (averaged per job.stepid) from 3 jobs\n```\neacct -j 175966,175967,175968\n```\n\n#### Important Options\n - `-l` shows the information for each node for each job instead of the global statistics for said job.\n - `-r` shows the EAR loop signatures. Users, job ids, and step ids can be specified as if were showing job information.\n - `-c` specifies the file where the output will be stored in CSV format. If the argument is \"no_file\" the output will be printed to STDOUT [default: off]\n\n\n### Example:\n\n```\nsqueue\n             JOBID PARTITION     NAME     USER ST       TIME  NODES NODELIST(REASON)\n           2884239      rome ear_sbat benjamic  R       2:19      1 tcn352\n```\n\n```\n[benjamic@int4 EAR]$ eacct -j 2884239\n    JOB-STEP USER       APPLICATION      POLICY NODES AVG/DEF/IMC(GHz) TIME(s)    POWER(W) GBS     CPI   ENERGY(J)    GFLOPS/W IO(MBs) MPI%  G-POW (T/U)   G-FREQ  G-UTIL(G/MEM)\n2884239-sb   benjamic   ear_sbatch_GROMA MO     1     2.57/2.60/---    386.00     596.51   ---     ---   230253       ---      ---     ---   ---           ---     ---          \n2884239-0    benjamic   ear_sbatch_GROMA MO     1     2.57/2.60/1.47   348.64     617.18   8.33    0.33  215175       0.2930   0.3     77.6  0.00/---      ---     --- \n```\n\n### Application Characterization\n\nEAR is not only a tool that will throttle CPU Freqs, but it also allows you to collect \"traces\" of your application, and characterize it. This is especially handy for large many node jobs, that often prove difficult to profile. In this way EAR is also a \"light-weight\" profiler for large applications.\n\nThe image below illustrates the usage of EAR to show the characteristics of a variety of multi-node CPU based applications side by side. This information can be obtained via the `monitoring` policy in EAR, and visualized with the `eacct` tool.\n\n![Application_char](media/CPU_characterization_plot.png)\n"}]