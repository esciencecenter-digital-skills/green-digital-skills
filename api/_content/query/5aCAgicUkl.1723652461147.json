[{"_path":"/modules/optimizing-energy-use/slides_optimizing_energy_use","_dir":"optimizing-energy-use","_draft":false,"_partial":false,"_locale":"","title":"Optimizing in Practice","description":"===","type":"slides","order":1,"_type":"markdown","_id":"local_fs:modules:optimizing-energy-use:slides_optimizing_energy_use.md","_source":"local_fs","_file":"modules/optimizing-energy-use/slides_optimizing_energy_use.md","_extension":"md","plainText":"---\ntitle: Optimizing in Practice\ntype: slides\norder: 1\n---\n\n<!-- .slide: data-state=\"title\" -->\n\n# Optimizing Energy Use in Practice\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Good software practice\n\nClean and maintainable software is essential\nto sustainable/green software:\n - ease of use, reduce error during data settings\n - less bugs, avoid wasteful bugged runs\n\nNote:\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Software life cycle\n\n- Thinking about long term sustainability, documentation.\n- Reusable software is a key component of modern\nsoftware development, reducing the time/energy consuming\ntask of developing every component of complex softwares.\n\nNote:\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## What language should I use?\n- Typical conception of energy efficiency:\n  - C++ and Rust at the top\n  - Python and R at the bottom\n- There is a lot of truth in this but there are a lot of important considerations\n- **Many major numerical libraries in Python are not Python \"under the surface\"**\n  - The core is usually C++ or something like that.\n  - e.g. PyTorch, Tensorflow, numpy (and many others)\n\nNote:\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Right tool for each task\n\nAre there slow programming languages that should be\navoided ?\n - each tool has it's purpose.\nPython: great for stitching pieces together, easy prototyping\nC/C++/Fortran: better at crunching number fast, but not\nso good at doing string manipulation, ...\n\nBenchmark available in the litterature can be missleading.\n\n-> Use the right tool for each task (could simply be the \ntool you're confortable with), blending languages\nwhen necessary.\n\n<center>\n<img src=\"media/fig-dummy.png\" width=\"55%\">\n</center>\n\nNote:\n\n===\n\n\n<!-- .slide: data-state=\"standard\" -->\n\n## What software should we optimize?\n- **It is important that frequently used tools are as efficient as possible**\n- Your single-use analysis scripts probably don't matter so much - just use the easiest language for the job\n- Optimization is not free and costs development time (and energy) especially in lower level languages like C\n- Generally there are not enough RSEs to do all the coding and optimizations, and researchers don't have time\n\nNote:\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Minimizing energy use\n- Ultimately depends on the resources you use\n- Number of CPU cores is clearly a large contributor\n- Carbon footprint of memory is interesting - it doesn't matter how much you use, but how much is available. Don't request 10 times the memory you need on a server \"just in case\"\n- Think about WHEN we run a job on a server. Energy mix different at different times.\n- Can use tools such as the Carbon Aware Task Scheduler - tells you what is the best time to run in the next 48 hours.\n- Most jobs have some flexibility - we don't care if we run it right now or in a few hours. Especially over the weekend.\n\nNote:\n\n===\n\n<!-- .slide: data-state=\"standard\" -->\n\n## Energy usage\n\nEnergy is power * time -> as first approximation,\nmore efficient (faster) software will be energy efficient.\n\nA note on parallelism and scaling issue.\n\n<center>\n<img src=\"media/fig-dummy.png\" width=\"55%\">\n</center>\n\nNote:\n\n===\n\n## How to measure\n\nintroducing PMT (Python) / RJoules (R) / EAR (language agnostic).\n\n\n<center>\n<img src=\"media/fig-dummy.png\" width=\"55%\">\n</center>\n\nNote:\n\n===\n\n<!-- .slide: data-state=\"keepintouch\" -->\n\n\nwww.esciencecenter.nl\n\ninfo@esciencecenter.nl\n\n020 - 460 47 70\n"},{"_path":"/modules/software-development-handson/exercises_module1","_dir":"software-development-handson","_draft":false,"_partial":false,"_locale":"","title":"Exercises","description":"Add here your exercises...","type":"exercise","order":2,"_type":"markdown","_id":"local_fs:modules:software-development-handson:exercises_module1.md","_source":"local_fs","_file":"modules/software-development-handson/exercises_module1.md","_extension":"md","plainText":"---\ntitle: Exercises\ntype: exercise\norder: 2\n---\n\n# Exercises\n\nAdd here your exercises..."}]