[{"data":1,"prerenderedAt":685},["ShallowReactive",2],{"content-query-E4leBsHYEO":3,"content-query-AT44bg6JPw":599},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"type":10,"order":11,"body":12,"_type":592,"_id":593,"_source":594,"_file":595,"_stem":596,"_extension":597,"plainText":598},"/modules/hpc-handson/exercises","hpc-handson",false,"","Exercises","Choose an application from the list below","exercise",6,{"type":13,"children":14,"toc":575},"root",[15,23,36,43,49,55,62,74,137,142,148,164,169,176,260,272,277,282,306,345,356,367,372,386,397,402,414,435,448,461,472,481,492,500,511,519,524,544,552,557,565],{"type":16,"tag":17,"props":18,"children":20},"element","h1",{"id":19},"exercises",[21],{"type":22,"value":8},"text",{"type":16,"tag":24,"props":25,"children":26},"p",{},[27,29],{"type":22,"value":28},"Choose an application from the list ",{"type":16,"tag":30,"props":31,"children":33},"a",{"href":32},"#applications",[34],{"type":22,"value":35},"below",{"type":16,"tag":37,"props":38,"children":40},"h3",{"id":39},"_1-monitor-an-application-with-ear",[41],{"type":22,"value":42},"1. Monitor an application with EAR",{"type":16,"tag":37,"props":44,"children":46},{"id":45},"_2-identify-whether-the-applicaiton-is-cpu-intensive-or-memorycommunication-intensive",[47],{"type":22,"value":48},"2. Identify whether the applicaiton is CPU intensive or Memory/Communication intensive",{"type":16,"tag":37,"props":50,"children":52},{"id":51},"_3-play-with-pytorch-automatic-mixed-precision-and-maybe-model-size-what-impacts-on-energy-does-this-have",[53],{"type":22,"value":54},"3. Play with PyTorch Automatic Mixed Precision, and maybe model \"size\". What impacts on Energy does this have?",{"type":16,"tag":56,"props":57,"children":59},"h2",{"id":58},"applications",[60],{"type":22,"value":61},"Applications",{"type":16,"tag":24,"props":63,"children":64},{},[65,67],{"type":22,"value":66},"All of the Applications used in this tutorial can be found in the project space ",{"type":16,"tag":68,"props":69,"children":71},"code",{"className":70},[],[72],{"type":22,"value":73},"/projects/0/energy-course/",{"type":16,"tag":75,"props":76,"children":77},"ol",{},[78,88],{"type":16,"tag":79,"props":80,"children":81},"li",{},[82],{"type":16,"tag":30,"props":83,"children":85},{"href":84},"#synthetic-applications",[86],{"type":22,"value":87},"Synthetic Applications",{"type":16,"tag":79,"props":89,"children":90},{},[91,97],{"type":16,"tag":30,"props":92,"children":94},{"href":93},"#scientific-applications",[95],{"type":22,"value":96},"Scientific Applications",{"type":16,"tag":98,"props":99,"children":100},"ul",{},[101,110,119,128],{"type":16,"tag":79,"props":102,"children":103},{},[104],{"type":16,"tag":30,"props":105,"children":107},{"href":106},"#hemepure",[108],{"type":22,"value":109},"HemePure",{"type":16,"tag":79,"props":111,"children":112},{},[113],{"type":16,"tag":30,"props":114,"children":116},{"href":115},"#palabos",[117],{"type":22,"value":118},"Palabos",{"type":16,"tag":79,"props":120,"children":121},{},[122],{"type":16,"tag":30,"props":123,"children":125},{"href":124},"#gromacs",[126],{"type":22,"value":127},"GROMACS",{"type":16,"tag":79,"props":129,"children":130},{},[131],{"type":16,"tag":30,"props":132,"children":134},{"href":133},"#pytorch",[135],{"type":22,"value":136},"PyTorch",{"type":16,"tag":56,"props":138,"children":140},{"id":139},"synthetic-applications",[141],{"type":22,"value":87},{"type":16,"tag":37,"props":143,"children":145},{"id":144},"nas-parallel-benchmarks-npb34-mz-mpiopenmp-sp-mz-benchmark",[146],{"type":22,"value":147},"NAS Parallel Benchmarks (NPB3.4-MZ MPI+OpenMP) - SP-MZ Benchmark",{"type":16,"tag":149,"props":150,"children":151},"blockquote",{},[152],{"type":16,"tag":24,"props":153,"children":154},{},[155,157],{"type":22,"value":156},"The NAS Parallel Benchmarks (NPB) are a small set of programs designed to help evaluate the performance of parallel supercomputers. The benchmarks are derived from computational fluid dynamics (CFD) applications ",{"type":16,"tag":30,"props":158,"children":162},{"href":159,"rel":160},"https://www.nas.nasa.gov/software/npb.html",[161],"nofollow",[163],{"type":22,"value":159},{"type":16,"tag":24,"props":165,"children":166},{},[167],{"type":22,"value":168},"In this course we will use the \"Multi-zone versions of NPB\" (NPB-MZ). These are designed to exploit multiple levels of parallelism in applications and to test the effectiveness of multi-level and hybrid parallelization (MPI-OpenMP) paradigms and tools. Specifically we use the SP-MZ (even-size zones within a problem class, increased number of zones as problem class grows).",{"type":16,"tag":170,"props":171,"children":173},"h5",{"id":172},"problem-sizes",[174],{"type":22,"value":175},"Problem Sizes:",{"type":16,"tag":177,"props":178,"children":179},"table",{},[180,209],{"type":16,"tag":181,"props":182,"children":183},"thead",{},[184],{"type":16,"tag":185,"props":186,"children":187},"tr",{},[188,194,199,204],{"type":16,"tag":189,"props":190,"children":191},"th",{},[192],{"type":22,"value":193},"Class",{"type":16,"tag":189,"props":195,"children":196},{},[197],{"type":22,"value":198},"Mesh size (x)",{"type":16,"tag":189,"props":200,"children":201},{},[202],{"type":22,"value":203},"Mesh size (y)",{"type":16,"tag":189,"props":205,"children":206},{},[207],{"type":22,"value":208},"Mesh size (z)",{"type":16,"tag":210,"props":211,"children":212},"tbody",{},[213,237],{"type":16,"tag":185,"props":214,"children":215},{},[216,222,227,232],{"type":16,"tag":217,"props":218,"children":219},"td",{},[220],{"type":22,"value":221},"C",{"type":16,"tag":217,"props":223,"children":224},{},[225],{"type":22,"value":226},"240",{"type":16,"tag":217,"props":228,"children":229},{},[230],{"type":22,"value":231},"320",{"type":16,"tag":217,"props":233,"children":234},{},[235],{"type":22,"value":236},"28",{"type":16,"tag":185,"props":238,"children":239},{},[240,245,250,255],{"type":16,"tag":217,"props":241,"children":242},{},[243],{"type":22,"value":244},"D",{"type":16,"tag":217,"props":246,"children":247},{},[248],{"type":22,"value":249},"1632",{"type":16,"tag":217,"props":251,"children":252},{},[253],{"type":22,"value":254},"1216",{"type":16,"tag":217,"props":256,"children":257},{},[258],{"type":22,"value":259},"34",{"type":16,"tag":24,"props":261,"children":262},{},[263,265],{"type":22,"value":264},"Example jobscript\n",{"type":16,"tag":30,"props":266,"children":269},{"href":267,"target":268},"/modules/hpc-handson/scripts/NPB_job.sh","_blank",[270],{"type":22,"value":271},"NPB_job.sh",{"type":16,"tag":56,"props":273,"children":275},{"id":274},"scientific-applications",[276],{"type":22,"value":96},{"type":16,"tag":37,"props":278,"children":280},{"id":279},"hemepure",[281],{"type":22,"value":109},{"type":16,"tag":149,"props":283,"children":284},{},[285],{"type":16,"tag":24,"props":286,"children":287},{},[288,290,296,300],{"type":22,"value":289},"HemePure/HemeLB developed by the team of Prof Peter Coveney at University College London (UCL), is a software pipeline that simulates blood flow. HemePure is specifically designed to efficiently handle sparse topologies, supports real-time visualization and remote steering of the simulation and can handle fully resolved realistic vessels like those found in the human brain. ",{"type":16,"tag":30,"props":291,"children":294},{"href":292,"rel":293},"https://github.com/UCL-CCS/HemePure",[161],[295],{"type":22,"value":292},{"type":16,"tag":297,"props":298,"children":299},"br",{},[],{"type":16,"tag":30,"props":301,"children":304},{"href":302,"rel":303},"https://github.com/UCL-CCS/HemePure-GPU",[161],[305],{"type":22,"value":302},{"type":16,"tag":98,"props":307,"children":308},{},[309],{"type":16,"tag":79,"props":310,"children":311},{},[312,314,320,322,327,329,335,337,343],{"type":22,"value":313},"The executables are located in the directory ",{"type":16,"tag":68,"props":315,"children":317},{"className":316},[],[318],{"type":22,"value":319},"/projects/0/energy-course/HemePure",{"type":22,"value":321},". There you will find the ",{"type":16,"tag":68,"props":323,"children":325},{"className":324},[],[326],{"type":22,"value":279},{"type":22,"value":328}," and ",{"type":16,"tag":68,"props":330,"children":332},{"className":331},[],[333],{"type":22,"value":334},"hemepure_gpu",{"type":22,"value":336}," (CUDA enabled) exectubles.\n",{"type":16,"tag":338,"props":339,"children":340},"strong",{},[341],{"type":22,"value":342},"How to run a case",{"type":22,"value":344},"\nWe will be running through an example of pressure driven flow through a bifurcation available in the HemeLB download.",{"type":16,"tag":24,"props":346,"children":347},{},[348,350],{"type":22,"value":349},"CPU example jobscript\n",{"type":16,"tag":30,"props":351,"children":353},{"href":352,"target":268},"/modules/hpc-handson/scripts/HemePure_CPU_job.sh",[354],{"type":22,"value":355},"hemepure_cpu_job.sh",{"type":16,"tag":24,"props":357,"children":358},{},[359,361],{"type":22,"value":360},"GPU example jobscript\n",{"type":16,"tag":30,"props":362,"children":364},{"href":363,"target":268},"/modules/hpc-handson/scripts/HemePure_GPU_job.sh",[365],{"type":22,"value":366},"hemepure_gpu_job.sh",{"type":16,"tag":37,"props":368,"children":370},{"id":369},"palabos",[371],{"type":22,"value":118},{"type":16,"tag":149,"props":373,"children":374},{},[375],{"type":16,"tag":24,"props":376,"children":377},{},[378,380],{"type":22,"value":379},"The Palabos (Parallel Lattice Boltzmann Solver) library is a framework for general-purpose computational fluid dynamics (CFD), with a kernel based on the lattice Boltzmann method. The case we use in this course is a simulation of blood flow in a inside the 3D aneurysm geometry. ",{"type":16,"tag":30,"props":381,"children":384},{"href":382,"rel":383},"https://palabos.unige.ch/",[161],[385],{"type":22,"value":382},{"type":16,"tag":24,"props":387,"children":388},{},[389,391],{"type":22,"value":390},"example jobscript\n",{"type":16,"tag":30,"props":392,"children":394},{"href":393,"target":268},"/modules/hpc-handson/scripts/Palabos_job.sh",[395],{"type":22,"value":396},"palabos_job.sh",{"type":16,"tag":37,"props":398,"children":400},{"id":399},"gromacs",[401],{"type":22,"value":127},{"type":16,"tag":149,"props":403,"children":404},{},[405],{"type":16,"tag":24,"props":406,"children":407},{},[408,412],{"type":16,"tag":338,"props":409,"children":410},{},[411],{"type":22,"value":127},{"type":22,"value":413}," A free and open-source software suite for high-performance molecular dynamics and output analysis.",{"type":16,"tag":149,"props":415,"children":416},{},[417],{"type":16,"tag":24,"props":418,"children":419},{},[420,425,427,433],{"type":16,"tag":338,"props":421,"children":422},{},[423],{"type":22,"value":424},"The HECBioSim Benchmarks:",{"type":22,"value":426}," (",{"type":16,"tag":30,"props":428,"children":431},{"href":429,"rel":430},"https://www.hecbiosim.ac.uk/access-hpc/benchmarks",[161],[432],{"type":22,"value":429},{"type":22,"value":434},")",{"type":16,"tag":149,"props":436,"children":437},{},[438],{"type":16,"tag":24,"props":439,"children":440},{},[441,446],{"type":16,"tag":338,"props":442,"children":443},{},[444],{"type":22,"value":445},"HECBioSim benchmark suite",{"type":22,"value":447}," consists of a set of simple benchmarks for a number of popular Molecular Dynamics (MD) engines, each of which is set at a different atom count. The benchmark suite currently contains benchmarks for the AMBER, GROMACS, LAMMPS and NAMD molecular dynamics packages.",{"type":16,"tag":24,"props":449,"children":450},{},[451,453,459],{"type":22,"value":452},"In this example we will choose the \"465K atom system - hEGFR Dimer of 1IVO and 1NQL\" simulation (which can be found here ",{"type":16,"tag":30,"props":454,"children":457},{"href":455,"rel":456},"https://github.com/victorusu/GROMACS_Benchmark_Suite/tree/1.0.0/HECBioSim/hEGFRDimer",[161],[458],{"type":22,"value":455},{"type":22,"value":460},"). This simulation contains a total number of atoms = 465,399 (Protein atoms = 21,749  Lipid atoms = 134,268  Water atoms = 309,087  Ions = 295). The run will take about 10 minutes to execute (using all 128 cores of an AMD ROME node). The image below shows the simulation that we will run.",{"type":16,"tag":98,"props":462,"children":463},{},[464],{"type":16,"tag":79,"props":465,"children":466},{},[467],{"type":16,"tag":338,"props":468,"children":469},{},[470],{"type":22,"value":471},"20K atom system",{"type":16,"tag":473,"props":474,"children":476},"pre",{"code":475},"curl -LJ https://github.com/victorusu/GROMACS_Benchmark_Suite/raw/1.0.0/HECBioSim/Crambin/benchmark.tpr -o Crambin_benchmark.tpr\n",[477],{"type":16,"tag":68,"props":478,"children":479},{"__ignoreMap":7},[480],{"type":22,"value":475},{"type":16,"tag":98,"props":482,"children":483},{},[484],{"type":16,"tag":79,"props":485,"children":486},{},[487],{"type":16,"tag":338,"props":488,"children":489},{},[490],{"type":22,"value":491},"1.4M atom system",{"type":16,"tag":473,"props":493,"children":495},{"code":494},"curl -LJ https://github.com/victorusu/GROMACS_Benchmark_Suite/raw/1.0.0/HECBioSim/hEGFRDimerPair/benchmark.tpr -o hEGFRDimerPair_benchmark.tpr\n",[496],{"type":16,"tag":68,"props":497,"children":498},{"__ignoreMap":7},[499],{"type":22,"value":494},{"type":16,"tag":98,"props":501,"children":502},{},[503],{"type":16,"tag":79,"props":504,"children":505},{},[506],{"type":16,"tag":338,"props":507,"children":508},{},[509],{"type":22,"value":510},"3M atom system",{"type":16,"tag":473,"props":512,"children":514},{"code":513},"curl -LJ https://github.com/victorusu/GROMACS_Benchmark_Suite/raw/1.0.0/HECBioSim/hEGFRDimerSmallerPL/benchmark.tpr -o hEGFRDimerSmallerPL_benchmark.tpr\n",[515],{"type":16,"tag":68,"props":516,"children":517},{"__ignoreMap":7},[518],{"type":22,"value":513},{"type":16,"tag":37,"props":520,"children":522},{"id":521},"pytorch",[523],{"type":22,"value":136},{"type":16,"tag":149,"props":525,"children":526},{},[527],{"type":16,"tag":24,"props":528,"children":529},{},[530,532,538],{"type":22,"value":531},"The ResNet model is based on the Deep Residual Learning for Image Recognition from this paper ",{"type":16,"tag":30,"props":533,"children":536},{"href":534,"rel":535},"https://arxiv.org/abs/1512.03385",[161],[537],{"type":22,"value":534},{"type":16,"tag":30,"props":539,"children":542},{"href":540,"rel":541},"https://pytorch.org/hub/pytorch_vision_resnet/",[161],[543],{"type":22,"value":540},{"type":16,"tag":24,"props":545,"children":546},{},[547],{"type":16,"tag":338,"props":548,"children":549},{},[550],{"type":22,"value":551},"torchvision should be installed in your environment first",{"type":16,"tag":24,"props":553,"children":554},{},[555],{"type":22,"value":556},"Example how to install 2023",{"type":16,"tag":473,"props":558,"children":560},{"code":559},"module load 2023\nmodule load PyTorch/2.1.2-foss-2023a-CUDA-12.1.1\nmodule load torchvision/0.16.0-foss-2023a-CUDA-12.1.1\n",[561],{"type":16,"tag":68,"props":562,"children":563},{"__ignoreMap":7},[564],{"type":22,"value":559},{"type":16,"tag":24,"props":566,"children":567},{},[568,569],{"type":22,"value":264},{"type":16,"tag":30,"props":570,"children":572},{"href":571,"target":268},"/modules/hpc-handson/scripts/PyTorch_job.sh",[573],{"type":22,"value":574},"PyTorch_job.sh",{"title":7,"searchDepth":576,"depth":576,"links":577},2,[578,580,581,582,583,586],{"id":39,"depth":579,"text":42},3,{"id":45,"depth":579,"text":48},{"id":51,"depth":579,"text":54},{"id":58,"depth":576,"text":61},{"id":139,"depth":576,"text":87,"children":584},[585],{"id":144,"depth":579,"text":147},{"id":274,"depth":576,"text":96,"children":587},[588,589,590,591],{"id":279,"depth":579,"text":109},{"id":369,"depth":579,"text":118},{"id":399,"depth":579,"text":127},{"id":521,"depth":579,"text":136},"markdown","local_fs:modules:hpc-handson:exercises.md","local_fs","modules/hpc-handson/exercises.md","modules/hpc-handson/exercises","md","---\ntitle: Exercises\ntype: exercise\norder: 6\n---\n\n# Exercises\nChoose an application from the list [below](#applications)\n### 1. Monitor an application with EAR\n### 2. Identify whether the applicaiton is CPU intensive or Memory/Communication intensive\n### 3. Play with PyTorch Automatic Mixed Precision, and maybe model \"size\". What impacts on Energy does this have?\n\n\n## Applications\n\nAll of the Applications used in this tutorial can be found in the project space `/projects/0/energy-course/`\n\n1. [Synthetic Applications](#synthetic-applications)\n2. [Scientific Applications](#scientific-applications)\n   - [HemePure](#hemepure)\n   - [Palabos](#palabos)\n   - [GROMACS](#gromacs)\n   - [PyTorch](#pytorch)\n\n\n## Synthetic Applications\n### NAS Parallel Benchmarks (NPB3.4-MZ MPI+OpenMP) - SP-MZ Benchmark\n> The NAS Parallel Benchmarks (NPB) are a small set of programs designed to help evaluate the performance of parallel supercomputers. The benchmarks are derived from computational fluid dynamics (CFD) applications https://www.nas.nasa.gov/software/npb.html\n\n\nIn this course we will use the \"Multi-zone versions of NPB\" (NPB-MZ). These are designed to exploit multiple levels of parallelism in applications and to test the effectiveness of multi-level and hybrid parallelization (MPI-OpenMP) paradigms and tools. Specifically we use the SP-MZ (even-size zones within a problem class, increased number of zones as problem class grows).\n\n##### Problem Sizes:\n\n| Class     | Mesh size (x)  | Mesh size (y)  | Mesh size (z)  |\n| ----------- | ----------- | ----------- | ----------- |\n| C | 240 | 320 | 28 |\n| D | 1632  | 1216 | 34 |\n\nExample jobscript\n[NPB_job.sh](scripts/NPB_job.sh)\n\n\n\n## Scientific Applications\n### HemePure\n> HemePure/HemeLB developed by the team of Prof Peter Coveney at University College London (UCL), is a software pipeline that simulates blood flow. HemePure is specifically designed to efficiently handle sparse topologies, supports real-time visualization and remote steering of the simulation and can handle fully resolved realistic vessels like those found in the human brain. https://github.com/UCL-CCS/HemePure        \nhttps://github.com/UCL-CCS/HemePure-GPU\n\n* The executables are located in the directory `/projects/0/energy-course/HemePure`. There you will find the `hemepure` and `hemepure_gpu` (CUDA enabled) exectubles.\n**How to run a case**\nWe will be running through an example of pressure driven flow through a bifurcation available in the HemeLB download.\n\nCPU example jobscript\n[hemepure_cpu_job.sh](scripts/HemePure_CPU_job.sh)\n\nGPU example jobscript\n[hemepure_gpu_job.sh](scripts/HemePure_GPU_job.sh)\n\n### Palabos\n\n> The Palabos (Parallel Lattice Boltzmann Solver) library is a framework for general-purpose computational fluid dynamics (CFD), with a kernel based on the lattice Boltzmann method. The case we use in this course is a simulation of blood flow in a inside the 3D aneurysm geometry. https://palabos.unige.ch/\n\nexample jobscript\n[palabos_job.sh](scripts/Palabos_job.sh)\n\n\n### GROMACS\n> **GROMACS** A free and open-source software suite for high-performance molecular dynamics and output analysis.\n\n> **The HECBioSim Benchmarks:** (https://www.hecbiosim.ac.uk/access-hpc/benchmarks)\n\n> **HECBioSim benchmark suite** consists of a set of simple benchmarks for a number of popular Molecular Dynamics (MD) engines, each of which is set at a different atom count. The benchmark suite currently contains benchmarks for the AMBER, GROMACS, LAMMPS and NAMD molecular dynamics packages.\n\nIn this example we will choose the \"465K atom system - hEGFR Dimer of 1IVO and 1NQL\" simulation (which can be found here \u003Chttps://github.com/victorusu/GROMACS_Benchmark_Suite/tree/1.0.0/HECBioSim/hEGFRDimer>). This simulation contains a total number of atoms = 465,399 (Protein atoms = 21,749  Lipid atoms = 134,268  Water atoms = 309,087  Ions = 295). The run will take about 10 minutes to execute (using all 128 cores of an AMD ROME node). The image below shows the simulation that we will run.\n\n- **20K atom system** \n```\ncurl -LJ https://github.com/victorusu/GROMACS_Benchmark_Suite/raw/1.0.0/HECBioSim/Crambin/benchmark.tpr -o Crambin_benchmark.tpr\n```\n- **1.4M atom system** \n``` \ncurl -LJ https://github.com/victorusu/GROMACS_Benchmark_Suite/raw/1.0.0/HECBioSim/hEGFRDimerPair/benchmark.tpr -o hEGFRDimerPair_benchmark.tpr\n``` \n- **3M atom system** \n```\ncurl -LJ https://github.com/victorusu/GROMACS_Benchmark_Suite/raw/1.0.0/HECBioSim/hEGFRDimerSmallerPL/benchmark.tpr -o hEGFRDimerSmallerPL_benchmark.tpr\n```\n\n\n\n\n\n### PyTorch\n> The ResNet model is based on the Deep Residual Learning for Image Recognition from this paper https://arxiv.org/abs/1512.03385 \nhttps://pytorch.org/hub/pytorch_vision_resnet/\n\n**torchvision should be installed in your environment first**\n\nExample how to install 2023\n```\nmodule load 2023\nmodule load PyTorch/2.1.2-foss-2023a-CUDA-12.1.1\nmodule load torchvision/0.16.0-foss-2023a-CUDA-12.1.1\n```\n\nExample jobscript\n[PyTorch_job.sh](scripts/PyTorch_job.sh)\n\n",[600,662],{"_path":601,"_dir":602,"_draft":6,"_partial":6,"_locale":7,"title":603,"description":7,"body":604,"_type":592,"_id":658,"_source":594,"_file":659,"_stem":660,"_extension":597,"plainText":661},"/main/about","main","About",{"type":13,"children":605,"toc":654},[606,612,617,622,643,649],{"type":16,"tag":56,"props":607,"children":609},{"id":608},"about-the-green-digital-skills-course",[610],{"type":22,"value":611},"About the Green Digital Skills course",{"type":16,"tag":24,"props":613,"children":614},{},[615],{"type":22,"value":616},"In this course, we want to equip the attendees with\na basic knowledge of the link from digital and computational science to energy consumption, and\neventually equivalent CO2 emissions.",{"type":16,"tag":24,"props":618,"children":619},{},[620],{"type":22,"value":621},"The course material consists of two parts:",{"type":16,"tag":98,"props":623,"children":624},{},[625,638],{"type":16,"tag":79,"props":626,"children":627},{},[628,630,636],{"type":22,"value":629},"a lecture, in three chapters, introducing the general topic of ",{"type":16,"tag":68,"props":631,"children":633},{"className":632},[],[634],{"type":22,"value":635},"green",{"type":22,"value":637}," computing",{"type":16,"tag":79,"props":639,"children":640},{},[641],{"type":22,"value":642},"a set of hands-on exercises, covering general good practices for software development, and tools for measuring energy and CO2 emissions on your laptop or on HPC clusters",{"type":16,"tag":56,"props":644,"children":646},{"id":645},"target-audience",[647],{"type":22,"value":648},"Target audience",{"type":16,"tag":24,"props":650,"children":651},{},[652],{"type":22,"value":653},"The target audience for this course includes, but is not limited to, students, reseachers,\ndata scientists, and IT support staff performing computational science, handling data, or\nusing/developing scientific software.",{"title":7,"searchDepth":576,"depth":576,"links":655},[656,657],{"id":608,"depth":576,"text":611},{"id":645,"depth":576,"text":648},"local_fs:main:about.md","main/about.md","main/about","---\ntitle: About\n---\n\n## About the Green Digital Skills course\n\nIn this course, we want to equip the attendees with\na basic knowledge of the link from digital and computational science to energy consumption, and\neventually equivalent CO2 emissions.\n\nThe course material consists of two parts: \n - a lecture, in three chapters, introducing the general topic of `green` computing\n - a set of hands-on exercises, covering general good practices for software development, and tools for measuring energy and CO2 emissions on your laptop or on HPC clusters \n\n\n## Target audience\n\nThe target audience for this course includes, but is not limited to, students, reseachers,\ndata scientists, and IT support staff performing computational science, handling data, or\nusing/developing scientific software.\n",{"_path":663,"_dir":602,"_draft":6,"_partial":6,"_locale":7,"title":664,"description":7,"body":665,"_type":592,"_id":681,"_source":594,"_file":682,"_stem":683,"_extension":597,"plainText":684},"/main/contribute","Contribute",{"type":13,"children":666,"toc":678},[667,673],{"type":16,"tag":56,"props":668,"children":670},{"id":669},"contributing-to-this-lesson",[671],{"type":22,"value":672},"Contributing to this lesson",{"type":16,"tag":24,"props":674,"children":675},{},[676],{"type":22,"value":677},"Add contributing guidelines for you project.",{"title":7,"searchDepth":576,"depth":576,"links":679},[680],{"id":669,"depth":576,"text":672},"local_fs:main:contribute.md","main/contribute.md","main/contribute","---\ntitle: Contribute\n---\n\n## Contributing to this lesson\n\nAdd contributing guidelines for you project.",1732130675712]