[{"data":1,"prerenderedAt":708},["ShallowReactive",2],{"content-query-kAGCq6tXCg":3,"content-query-AT44bg6JPw":624},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":7,"type":9,"order":10,"body":11,"_type":618,"_id":619,"_source":620,"_file":621,"_extension":622,"plainText":623},"/modules/software-development-handson/exercises_codecarbon","software-development-handson",false,"","Code Carbon","exercise",5,{"type":12,"children":13,"toc":603},"root",[14,23,30,34,40,82,87,94,113,119,122,136,142,149,154,164,169,177,182,190,196,201,209,214,222,227,233,239,245,248,262,267,272,289,318,323,331,343,351,380,388,393,409,414,422,435,455,467,475,480,510,516,519,531,544,549,557,562,570,582,588,591],{"type":15,"tag":16,"props":17,"children":19},"element","h1",{"id":18},"codecarbon",[20],{"type":21,"value":22},"text","CodeCarbon",{"type":15,"tag":24,"props":25,"children":27},"h2",{"id":26},"introduction",[28],{"type":21,"value":29},"Introduction",{"type":15,"tag":31,"props":32,"children":33},"hr",{},[],{"type":15,"tag":35,"props":36,"children":37},"p",{},[38],{"type":21,"value":39},"An important step in trying to improve the energy efficiency of your\nsoftware is to measure the actual energy consumed during the execution\nof your code.",{"type":15,"tag":35,"props":41,"children":42},{},[43,45,54,56,63,65,72,74,80],{"type":21,"value":44},"There are a handful of open-source software packages available online\nto measure the energy consumption of a piece of code, including\n",{"type":15,"tag":46,"props":47,"children":51},"a",{"href":48,"rel":49},"https://github.com/powerapi-ng/powerapi",[50],"nofollow",[52],{"type":21,"value":53},"PowerAPI",{"type":21,"value":55},",\n",{"type":15,"tag":46,"props":57,"children":60},{"href":58,"rel":59},"https://github.com/energymon/energymon",[50],[61],{"type":21,"value":62},"EnergyMon",{"type":21,"value":64}," or\n",{"type":15,"tag":46,"props":66,"children":69},{"href":67,"rel":68},"https://git.astron.nl/RD/pmt",[50],[70],{"type":21,"value":71},"PMT",{"type":21,"value":73},". In this hands-on exercice, we\nwill focus on ",{"type":15,"tag":46,"props":75,"children":78},{"href":76,"rel":77},"https://codecarbon.io/",[50],[79],{"type":21,"value":22},{"type":21,"value":81},", a Python package\nreadily available on Linux, Windows and MacOS.",{"type":15,"tag":35,"props":83,"children":84},{},[85],{"type":21,"value":86},"We will start by testing CodeCarbon on a simple example\ncode provided below, then provide guidance on how to test a snippet\nof your own code. For the later, we advise selecting a well-contained, single-purpose\nfunction at first and progressively extend to larger and more complex\nworkflows. The runtime of your selected function/program should be\nof the order of ~10s since CodeCarbon is not designed for high frequency\nmeasurments.",{"type":15,"tag":88,"props":89,"children":91},"h3",{"id":90},"prerequisite",[92],{"type":21,"value":93},"Prerequisite",{"type":15,"tag":95,"props":96,"children":97},"ul",{},[98],{"type":15,"tag":99,"props":100,"children":101},"li",{},[102,104,111],{"type":21,"value":103},"a working knowledge of Python. See ",{"type":15,"tag":46,"props":105,"children":108},{"href":106,"rel":107},"https://swcarpentry.github.io/python-novice-inflammation/index.html",[50],[109],{"type":21,"value":110},"Python Carpentries",{"type":21,"value":112}," for a quick introduction.",{"type":15,"tag":24,"props":114,"children":116},{"id":115},"installing-codecarbon",[117],{"type":21,"value":118},"Installing CodeCarbon",{"type":15,"tag":31,"props":120,"children":121},{},[],{"type":15,"tag":35,"props":123,"children":124},{},[125,127,134],{"type":21,"value":126},"Code Carbon is written in Python and brings a number of dependencies.\nIt is recommended to setup a dedicated environment using a package\nand environment management tool such as ",{"type":15,"tag":46,"props":128,"children":131},{"href":129,"rel":130},"https://docs.conda.io/projects/conda/en/latest/user-guide/getting-started.html",[50],[132],{"type":21,"value":133},"Conda",{"type":21,"value":135}," to avoid disrupting the packages currently available\non your computer. However, this step is not mandatory.",{"type":15,"tag":88,"props":137,"children":139},{"id":138},"on-macos",[140],{"type":21,"value":141},"On MacOS:",{"type":15,"tag":143,"props":144,"children":146},"h4",{"id":145},"using-conda",[147],{"type":21,"value":148},"Using Conda:",{"type":15,"tag":35,"props":150,"children":151},{},[152],{"type":21,"value":153},"Create a new Conda environment:",{"type":15,"tag":155,"props":156,"children":158},"pre",{"code":157},"conda create -n greencomputing python=3.12 \n",[159],{"type":15,"tag":160,"props":161,"children":162},"code",{"__ignoreMap":7},[163],{"type":21,"value":157},{"type":15,"tag":35,"props":165,"children":166},{},[167],{"type":21,"value":168},"Activate the new environment:",{"type":15,"tag":155,"props":170,"children":172},{"code":171},"conda activate greencomputing\n",[173],{"type":15,"tag":160,"props":174,"children":175},{"__ignoreMap":7},[176],{"type":21,"value":171},{"type":15,"tag":35,"props":178,"children":179},{},[180],{"type":21,"value":181},"Use the package manager 'pip' to get CodeCarbon (and its dependencies):",{"type":15,"tag":155,"props":183,"children":185},{"code":184},"pip install codecarbon\n",[186],{"type":15,"tag":160,"props":187,"children":188},{"__ignoreMap":7},[189],{"type":21,"value":184},{"type":15,"tag":143,"props":191,"children":193},{"id":192},"without-environment-manager",[194],{"type":21,"value":195},"Without environment manager:",{"type":15,"tag":35,"props":197,"children":198},{},[199],{"type":21,"value":200},"In this case, we assume that Python is already available on your computer.",{"type":15,"tag":155,"props":202,"children":204},{"code":203},"python -m pip install codecarbon\n",[205],{"type":15,"tag":160,"props":206,"children":207},{"__ignoreMap":7},[208],{"type":21,"value":203},{"type":15,"tag":35,"props":210,"children":211},{},[212],{"type":21,"value":213},"To check that CodeCarbon is effectively installed, try the following command:",{"type":15,"tag":155,"props":215,"children":217},{"code":216},"python -c \"from codecarbon import OfflineEmissionsTracker; print('SUCCESS')\"\n",[218],{"type":15,"tag":160,"props":219,"children":220},{"__ignoreMap":7},[221],{"type":21,"value":216},{"type":15,"tag":35,"props":223,"children":224},{},[225],{"type":21,"value":226},"If CodeCarbon was successfully installed, the command will simply return 'SUCCESS'.",{"type":15,"tag":88,"props":228,"children":230},{"id":229},"on-linux",[231],{"type":21,"value":232},"On Linux:",{"type":15,"tag":88,"props":234,"children":236},{"id":235},"on-windows",[237],{"type":21,"value":238},"On Windows",{"type":15,"tag":24,"props":240,"children":242},{"id":241},"using-codecarbon-a-first-example",[243],{"type":21,"value":244},"Using CodeCarbon: a first example",{"type":15,"tag":31,"props":246,"children":247},{},[],{"type":15,"tag":35,"props":249,"children":250},{},[251,253,260],{"type":21,"value":252},"The test case consists in computing the Euclidian distance\nbetween all the points contained in a list, where each point is defined by\ntwo coordinates. To illustrate how changes to the code can impact the energy consumption,\ntwo implementations of the computation are provided: a naive version\nrelying on Python's list and a version using Numpy. The code can\nbe obtained ",{"type":15,"tag":46,"props":254,"children":257},{"href":255,"target":256},"/modules/software-development-handson/media/EuclidianDistance.py","_blank",[258],{"type":21,"value":259},"here",{"type":21,"value":261},".",{"type":15,"tag":35,"props":263,"children":264},{},[265],{"type":21,"value":266},"Let's now write a small Python driver to execute the computation\nand measure the energy consumption.",{"type":15,"tag":35,"props":268,"children":269},{},[270],{"type":21,"value":271},"We will start by importing the Python modules needed. In a new\npython file (e.g. EDCodeCarbonTest.py), write the following:",{"type":15,"tag":155,"props":273,"children":284},{"code":274,"filename":275,"highlights":276,"language":280,"meta":281,"className":282},"import random\nimport numpy as np\nfrom EuclidianDistance import get_distances\nfrom codecarbon import OfflineEmissionsTracker \n","EDCodeCarbonTest.py",[277,10,278,279],4,6,7,"python","meta-info=val",[283],"language-python",[285],{"type":15,"tag":160,"props":286,"children":287},{"__ignoreMap":7},[288],{"type":21,"value":274},{"type":15,"tag":35,"props":290,"children":291},{},[292,294,300,302,308,310,316],{"type":21,"value":293},"The first two modules are needed in order to generate data. From the\ncode provided above, we will use the ",{"type":15,"tag":160,"props":295,"children":297},{"className":296},[],[298],{"type":21,"value":299},"get_distances",{"type":21,"value":301}," function, and\nfinally we will use CodeCarbon's ",{"type":15,"tag":160,"props":303,"children":305},{"className":304},[],[306],{"type":21,"value":307},"OfflineEmissionsTracker",{"type":21,"value":309},".\nNote that CodeCarbon can also be used ",{"type":15,"tag":160,"props":311,"children":313},{"className":312},[],[314],{"type":21,"value":315},"Online",{"type":21,"value":317},", allowing live access to\ncarbon intensity data and a dashboard, but the setup is more complicated.",{"type":15,"tag":35,"props":319,"children":320},{},[321],{"type":21,"value":322},"Once the modules are loaded, we can write the main function of our program,\nappending to the file created above:",{"type":15,"tag":155,"props":324,"children":326},{"code":325},"if __name__ == \"__main__\":\n    # Prepare a list of coordinates\n    # Define the list length\n    n_npts = 20000\n\n    # Get Numpy's random number generator with a fixed seed\n    rng = np.random.default_rng(12345)\n\n    # Populate the list, with coordinates uniformly sampled\n    # in the [0,1] interval.\n    points = []\n    for _ in range(n_npts):\n        points.append((rng.uniform(0.0, 1.0), rng.uniform(0.0, 1.0)))\n",[327],{"type":15,"tag":160,"props":328,"children":329},{"__ignoreMap":7},[330],{"type":21,"value":325},{"type":15,"tag":35,"props":332,"children":333},{},[334,336,341],{"type":21,"value":335},"We now have a list of points to pass to the ",{"type":15,"tag":160,"props":337,"children":339},{"className":338},[],[340],{"type":21,"value":299},{"type":21,"value":342}," function.\nBut we first need to initialize CodeCarbon emission tracker. In this example,\nwe will use a context manager such as:",{"type":15,"tag":155,"props":344,"children":346},{"code":345},"    with OfflineEmissionsTracker(country_iso_code=\"NLD\",\n                                 measure_power_secs=5) as tracker:\n        >> compute intensive code ...\n",[347],{"type":15,"tag":160,"props":348,"children":349},{"__ignoreMap":7},[350],{"type":21,"value":345},{"type":15,"tag":35,"props":352,"children":353},{},[354,356,362,364,369,371,378],{"type":21,"value":355},"where the ",{"type":15,"tag":160,"props":357,"children":359},{"className":358},[],[360],{"type":21,"value":361},"tracker",{"type":21,"value":363}," will directly start and report energy consumption as\nwe execute the code. There are numerous runtime options available when\ninitializing the ",{"type":15,"tag":160,"props":365,"children":367},{"className":366},[],[368],{"type":21,"value":307},{"type":21,"value":370},", refers to CodeCarbon\n",{"type":15,"tag":46,"props":372,"children":375},{"href":373,"rel":374},"https://mlco2.github.io/codecarbon/parameters.html",[50],[376],{"type":21,"value":377},"documentation",{"type":21,"value":379}," for a complete\noverview. In the example above we only provided the Netherlands ISO 3 letters code,\nand the interval (in seconds) to measure hardware power usage.\nLet's now add our actual computation in the code as follows:",{"type":15,"tag":155,"props":381,"children":383},{"code":382},"    with OfflineEmissionsTracker(country_iso_code=\"NLD\",\n                                 measure_power_secs=5) as tracker:\n        get_distances(points, \"base\")\n",[384],{"type":15,"tag":160,"props":385,"children":386},{"__ignoreMap":7},[387],{"type":21,"value":382},{"type":15,"tag":35,"props":389,"children":390},{},[391],{"type":21,"value":392},"where we use the base implementation of the Euclidean distance calculation. It is now\ntime to run the program.",{"type":15,"tag":394,"props":395,"children":396},"blockquote",{},[397],{"type":15,"tag":35,"props":398,"children":399},{},[400,407],{"type":15,"tag":160,"props":401,"children":404},{"className":402,"style":403},[],"color: darkred;",[405],{"type":21,"value":406},"Note",{"type":21,"value":408},": On MacOS, CodeCarbon relies on PowerMetrics to access hardware power data, thus requiring root/sudo access. You will be prompted for your login password",{"type":15,"tag":35,"props":410,"children":411},{},[412],{"type":21,"value":413},"The actual output of running the Python program will depend on your platform and hardware,\nbut it will resemble the following (here on MacOS):",{"type":15,"tag":155,"props":415,"children":417},{"code":416},"[...] [setup] RAM Tracking...\n[...] [setup] GPU Tracking...\n[...] No GPU found.\n[...] [setup] CPU Tracking...\n[...] Tracking Apple CPU and GPU via PowerMetrics\n[...] >>> Tracker's metadata:\n[...]   Platform system: macOS-14.6.1-arm64-arm-64bit\n[...]   Python version: 3.12.7\n[...]   CodeCarbon version: 2.7.1\n[...]   Available RAM : 24.000 GB\n[...]   CPU count: 8\n[...]   CPU model: Apple M2\n[...]   GPU count: 1\n[...]   GPU model: Apple M2\n[...] Saving emissions data to file ./NLeSC/Training/CodeCarbon/emissions.csv\n[...] Energy consumed for RAM : 0.000013 kWh. RAM Power : 9.000000000000002 W\n[...] Energy consumed for all CPUs : 0.000010 kWh. Total CPU Power : 7.500399999999999 W\n[...] Energy consumed for all GPUs : 0.000000 kWh. Total GPU Power : 0.001 W\n[...] Energy consumed for RAM : 0.000038 kWh. RAM Power : 9.000000000000002 W\n[...] 0.000048 kWh of electricity used since the beginning.\n[...] Energy consumed for all CPUs : 0.000033 kWh. Total CPU Power : 8.2367 W\n[...] Energy consumed for all GPUs : 0.000000 kWh. Total GPU Power : 0.002 W\n[...] Energy consumed for RAM : 0.000048 kWh. RAM Power : 9.000000000000002 W\n[...] ...\n[...] 0.000321 kWh of electricity used since the beginning.\n[...] 0.000890 g.CO2eq/s mean an estimation of 28.064960638276645 kg.CO2eq/year\n",[418],{"type":15,"tag":160,"props":419,"children":420},{"__ignoreMap":7},[421],{"type":21,"value":416},{"type":15,"tag":394,"props":423,"children":424},{},[425],{"type":15,"tag":35,"props":426,"children":427},{},[428,433],{"type":15,"tag":160,"props":429,"children":431},{"className":430,"style":403},[],[432],{"type":21,"value":406},{"type":21,"value":434},": If the CPU on your system is not recognized by CodeCarbon, a default CPU will be used but the code will issue Warnings.",{"type":15,"tag":35,"props":436,"children":437},{},[438,440,445,447,453],{"type":21,"value":439},"At time interval specified when initializing the ",{"type":15,"tag":160,"props":441,"children":443},{"className":442},[],[444],{"type":21,"value":307},{"type":21,"value":446},", power and energy\nare reported for the various hardware. Based on the country code provided, an estimate of\nthe CO2eq emission rate is also reported at the end. As you can see, a constant 9W power is used for the RAM here, whereas\nsmall fluctuations are observed on the CPU side. Even though the RAM and CPU are shared with other programs running\non your computer, CodeCarbon assign their full usage to the measured code. A more accurate measurement of the specific\nprocess CPU usage can be obtained by providing an extra argument to the tracker initialization, ",{"type":15,"tag":160,"props":448,"children":450},{"className":449},[],[451],{"type":21,"value":452},"tracking_mode = \"process\"",{"type":21,"value":454},".\nHowever, this method does not provide a good measurement of the memory power.",{"type":15,"tag":35,"props":456,"children":457},{},[458,460,465],{"type":21,"value":459},"Let's now switch to the Numpy version of program by updating the call to the ",{"type":15,"tag":160,"props":461,"children":463},{"className":462},[],[464],{"type":21,"value":299},{"type":21,"value":466}," function:",{"type":15,"tag":155,"props":468,"children":470},{"code":469},"        get_distances(points, \"numpy\")\n",[471],{"type":15,"tag":160,"props":472,"children":473},{"__ignoreMap":7},[474],{"type":21,"value":469},{"type":15,"tag":35,"props":476,"children":477},{},[478],{"type":21,"value":479},"And re-run the program. The measured energy consumption for thid case is 0.000194 kWh, for an estimated\nemission rate of 0.000538 g.CO2eq/s.\nThis small example demonstrate how by relying on a more efficient implementation, the energy consumption and associated\nemissions can be reduced, mostly due to a shorter runtime. Feel free to experiment with the following:",{"type":15,"tag":95,"props":481,"children":482},{},[483,488,500,505],{"type":15,"tag":99,"props":484,"children":485},{},[486],{"type":21,"value":487},"changing problem size",{"type":15,"tag":99,"props":489,"children":490},{},[491,493,498],{"type":21,"value":492},"update the parameters of the ",{"type":15,"tag":160,"props":494,"children":496},{"className":495},[],[497],{"type":21,"value":307},{"type":21,"value":499},", changing the country code for instance",{"type":15,"tag":99,"props":501,"children":502},{},[503],{"type":21,"value":504},"try an alternative implementation of the distance computation",{"type":15,"tag":99,"props":506,"children":507},{},[508],{"type":21,"value":509},"add timers to the script to estimate if the average power, is it changing between the two provided implementation ?",{"type":15,"tag":24,"props":511,"children":513},{"id":512},"using-codecarbon-your-own-code",[514],{"type":21,"value":515},"Using CodeCarbon: your own code",{"type":15,"tag":31,"props":517,"children":518},{},[],{"type":15,"tag":35,"props":520,"children":521},{},[522,524,529],{"type":21,"value":523},"If your target code is based on Python, the simplest way to adapt the small example provided above to\nyour case is wrap your entire program into a single function call and replace the ",{"type":15,"tag":160,"props":525,"children":527},{"className":526},[],[528],{"type":21,"value":299},{"type":21,"value":530}," function\nby your own.",{"type":15,"tag":35,"props":532,"children":533},{},[534,536,542],{"type":21,"value":535},"An alternate solution, applicable to softwares written in other programming language such as R or C++, is to\nrely on Python subprocess. In the following, let's assume that you have an executable R file (i.e.\nwith ",{"type":15,"tag":160,"props":537,"children":539},{"className":538},[],[540],{"type":21,"value":541},"#! /usr/bin/Rscript",{"type":21,"value":543}," on the first line).",{"type":15,"tag":35,"props":545,"children":546},{},[547],{"type":21,"value":548},"Create a new python file (e.g. CodeCarbonWrap.py), with the following imports:",{"type":15,"tag":155,"props":550,"children":552},{"code":551},"import subprocess\nfrom codecarbon import OfflineEmissionsTracker\n",[553],{"type":15,"tag":160,"props":554,"children":555},{"__ignoreMap":7},[556],{"type":21,"value":551},{"type":15,"tag":35,"props":558,"children":559},{},[560],{"type":21,"value":561},"and the following main function:",{"type":15,"tag":155,"props":563,"children":565},{"code":564},"if __name__ == \"__main__\":\n    with OfflineEmissionsTracker(country_iso_code=\"NLD\",\n                                 measure_power_secs=5) as tracker:                                                                                 \n        subprocess.call ([\"/usr/bin/Rscript\", \"--vanilla\", \"/pathto/MyrScript.r\"])\n",[566],{"type":15,"tag":160,"props":567,"children":568},{"__ignoreMap":7},[569],{"type":21,"value":564},{"type":15,"tag":35,"props":571,"children":572},{},[573,575,580],{"type":21,"value":574},"Note that because the script R script is executed in an external process, the option ",{"type":15,"tag":160,"props":576,"children":578},{"className":577},[],[579],{"type":21,"value":452},{"type":21,"value":581},"\nis no longer adapted and only the mode where the CPU usage of the entire computer is measured is relevant.",{"type":15,"tag":24,"props":583,"children":585},{"id":584},"conclusion",[586],{"type":21,"value":587},"Conclusion",{"type":15,"tag":31,"props":589,"children":590},{},[],{"type":15,"tag":35,"props":592,"children":593},{},[594,596,601],{"type":21,"value":595},"In this short tutorial, you have tested first-hand how to measure the energy consumption of a piece of code\nusing ",{"type":15,"tag":46,"props":597,"children":599},{"href":76,"rel":598},[50],[600],{"type":21,"value":22},{"type":21,"value":602},". CodeCarbon can be deployed on larger application as well as\non HPC platforms.\nAlthough written in Python, CodeCarbon can be used for any other languages as long as you are able to use\nPython subprocess to execute the external program (i.e. R, C++, Fortran, ...).",{"title":7,"searchDepth":604,"depth":604,"links":605},2,[606,610,615,616,617],{"id":26,"depth":604,"text":29,"children":607},[608],{"id":90,"depth":609,"text":93},3,{"id":115,"depth":604,"text":118,"children":611},[612,613,614],{"id":138,"depth":609,"text":141},{"id":229,"depth":609,"text":232},{"id":235,"depth":609,"text":238},{"id":241,"depth":604,"text":244},{"id":512,"depth":604,"text":515},{"id":584,"depth":604,"text":587},"markdown","local_fs:modules:software-development-handson:exercises_codecarbon.md","local_fs","modules/software-development-handson/exercises_codecarbon.md","md","---\ntitle: Code Carbon\ntype: exercise\norder: 5\n---\n\n# CodeCarbon\n\n## Introduction\n---------------\n\nAn important step in trying to improve the energy efficiency of your\nsoftware is to measure the actual energy consumed during the execution\nof your code.\n\nThere are a handful of open-source software packages available online\nto measure the energy consumption of a piece of code, including \n[PowerAPI](https://github.com/powerapi-ng/powerapi),\n[EnergyMon](https://github.com/energymon/energymon) or\n[PMT](https://git.astron.nl/RD/pmt). In this hands-on exercice, we \nwill focus on [CodeCarbon](https://codecarbon.io/), a Python package\nreadily available on Linux, Windows and MacOS.\n\nWe will start by testing CodeCarbon on a simple example\ncode provided below, then provide guidance on how to test a snippet\nof your own code. For the later, we advise selecting a well-contained, single-purpose\nfunction at first and progressively extend to larger and more complex\nworkflows. The runtime of your selected function/program should be\nof the order of ~10s since CodeCarbon is not designed for high frequency\nmeasurments.\n\n### Prerequisite\n\n - a working knowledge of Python. See [Python Carpentries](https://swcarpentry.github.io/python-novice-inflammation/index.html) for a quick introduction.\n\n## Installing CodeCarbon\n------------------------\n\nCode Carbon is written in Python and brings a number of dependencies.\nIt is recommended to setup a dedicated environment using a package\nand environment management tool such as [Conda](https://docs.conda.io/projects/conda/en/latest/user-guide/getting-started.html) to avoid disrupting the packages currently available\non your computer. However, this step is not mandatory.\n\n### On MacOS:\n\n#### Using Conda:\n\nCreate a new Conda environment:\n```\nconda create -n greencomputing python=3.12 \n```\n\nActivate the new environment:\n```\nconda activate greencomputing\n```\n\nUse the package manager 'pip' to get CodeCarbon (and its dependencies):\n```\npip install codecarbon\n```\n\n#### Without environment manager:\n\nIn this case, we assume that Python is already available on your computer.\n```\npython -m pip install codecarbon\n```\n\nTo check that CodeCarbon is effectively installed, try the following command:\n```\npython -c \"from codecarbon import OfflineEmissionsTracker; print('SUCCESS')\"\n```\nIf CodeCarbon was successfully installed, the command will simply return 'SUCCESS'.\n\n### On Linux:\n\n### On Windows\n\n\n## Using CodeCarbon: a first example\n------------------------------------\n\nThe test case consists in computing the Euclidian distance\nbetween all the points contained in a list, where each point is defined by\ntwo coordinates. To illustrate how changes to the code can impact the energy consumption,\ntwo implementations of the computation are provided: a naive version\nrelying on Python's list and a version using Numpy. The code can\nbe obtained [here](media/EuclidianDistance.py).\n\nLet's now write a small Python driver to execute the computation\nand measure the energy consumption.\n\nWe will start by importing the Python modules needed. In a new\npython file (e.g. EDCodeCarbonTest.py), write the following:\n```python [EDCodeCarbonTest.py]{4-6,7} meta-info=val\nimport random\nimport numpy as np\nfrom EuclidianDistance import get_distances\nfrom codecarbon import OfflineEmissionsTracker \n```\n\nThe first two modules are needed in order to generate data. From the\ncode provided above, we will use the ```get_distances``` function, and\nfinally we will use CodeCarbon's ```OfflineEmissionsTracker```.\nNote that CodeCarbon can also be used ```Online```, allowing live access to\ncarbon intensity data and a dashboard, but the setup is more complicated.\n\nOnce the modules are loaded, we can write the main function of our program,\nappending to the file created above:\n```\nif __name__ == \"__main__\":\n    # Prepare a list of coordinates\n    # Define the list length\n    n_npts = 20000\n\n    # Get Numpy's random number generator with a fixed seed\n    rng = np.random.default_rng(12345)\n\n    # Populate the list, with coordinates uniformly sampled\n    # in the [0,1] interval.\n    points = []\n    for _ in range(n_npts):\n        points.append((rng.uniform(0.0, 1.0), rng.uniform(0.0, 1.0)))\n```\n\nWe now have a list of points to pass to the ```get_distances``` function.\nBut we first need to initialize CodeCarbon emission tracker. In this example,\nwe will use a context manager such as:\n```\n    with OfflineEmissionsTracker(country_iso_code=\"NLD\",\n                                 measure_power_secs=5) as tracker:\n        >> compute intensive code ...\n```\nwhere the ```tracker``` will directly start and report energy consumption as\nwe execute the code. There are numerous runtime options available when\ninitializing the ```OfflineEmissionsTracker```, refers to CodeCarbon\n[documentation](https://mlco2.github.io/codecarbon/parameters.html) for a complete\noverview. In the example above we only provided the Netherlands ISO 3 letters code,\nand the interval (in seconds) to measure hardware power usage.\nLet's now add our actual computation in the code as follows:\n```\n    with OfflineEmissionsTracker(country_iso_code=\"NLD\",\n                                 measure_power_secs=5) as tracker:\n        get_distances(points, \"base\")\n```\nwhere we use the base implementation of the Euclidean distance calculation. It is now\ntime to run the program.\n\n> `Note`{style=\"color: darkred;\"}: On MacOS, CodeCarbon relies on PowerMetrics to access hardware power data, thus requiring root/sudo access. You will be prompted for your login password\n\n\nThe actual output of running the Python program will depend on your platform and hardware,\nbut it will resemble the following (here on MacOS):\n```\n[...] [setup] RAM Tracking...\n[...] [setup] GPU Tracking...\n[...] No GPU found.\n[...] [setup] CPU Tracking...\n[...] Tracking Apple CPU and GPU via PowerMetrics\n[...] >>> Tracker's metadata:\n[...]   Platform system: macOS-14.6.1-arm64-arm-64bit\n[...]   Python version: 3.12.7\n[...]   CodeCarbon version: 2.7.1\n[...]   Available RAM : 24.000 GB\n[...]   CPU count: 8\n[...]   CPU model: Apple M2\n[...]   GPU count: 1\n[...]   GPU model: Apple M2\n[...] Saving emissions data to file ./NLeSC/Training/CodeCarbon/emissions.csv\n[...] Energy consumed for RAM : 0.000013 kWh. RAM Power : 9.000000000000002 W\n[...] Energy consumed for all CPUs : 0.000010 kWh. Total CPU Power : 7.500399999999999 W\n[...] Energy consumed for all GPUs : 0.000000 kWh. Total GPU Power : 0.001 W\n[...] Energy consumed for RAM : 0.000038 kWh. RAM Power : 9.000000000000002 W\n[...] 0.000048 kWh of electricity used since the beginning.\n[...] Energy consumed for all CPUs : 0.000033 kWh. Total CPU Power : 8.2367 W\n[...] Energy consumed for all GPUs : 0.000000 kWh. Total GPU Power : 0.002 W\n[...] Energy consumed for RAM : 0.000048 kWh. RAM Power : 9.000000000000002 W\n[...] ...\n[...] 0.000321 kWh of electricity used since the beginning.\n[...] 0.000890 g.CO2eq/s mean an estimation of 28.064960638276645 kg.CO2eq/year\n```\n\n> `Note`{style=\"color: darkred;\"}: If the CPU on your system is not recognized by CodeCarbon, a default CPU will be used but the code will issue Warnings.\n\nAt time interval specified when initializing the ```OfflineEmissionsTracker```, power and energy\nare reported for the various hardware. Based on the country code provided, an estimate of\nthe CO2eq emission rate is also reported at the end. As you can see, a constant 9W power is used for the RAM here, whereas\nsmall fluctuations are observed on the CPU side. Even though the RAM and CPU are shared with other programs running\non your computer, CodeCarbon assign their full usage to the measured code. A more accurate measurement of the specific\nprocess CPU usage can be obtained by providing an extra argument to the tracker initialization, ```tracking_mode = \"process\"```.\nHowever, this method does not provide a good measurement of the memory power.\n\nLet's now switch to the Numpy version of program by updating the call to the ```get_distances``` function:\n```\n        get_distances(points, \"numpy\")\n```\nAnd re-run the program. The measured energy consumption for thid case is 0.000194 kWh, for an estimated\nemission rate of 0.000538 g.CO2eq/s.\nThis small example demonstrate how by relying on a more efficient implementation, the energy consumption and associated\nemissions can be reduced, mostly due to a shorter runtime. Feel free to experiment with the following:\n - changing problem size\n - update the parameters of the ```OfflineEmissionsTracker```, changing the country code for instance\n - try an alternative implementation of the distance computation\n - add timers to the script to estimate if the average power, is it changing between the two provided implementation ?\n\n## Using CodeCarbon: your own code\n----------------------------------\nIf your target code is based on Python, the simplest way to adapt the small example provided above to\nyour case is wrap your entire program into a single function call and replace the ```get_distances``` function\nby your own.\n\nAn alternate solution, applicable to softwares written in other programming language such as R or C++, is to\nrely on Python subprocess. In the following, let's assume that you have an executable R file (i.e.\nwith ```#! /usr/bin/Rscript``` on the first line).\n\nCreate a new python file (e.g. CodeCarbonWrap.py), with the following imports:\n```\nimport subprocess\nfrom codecarbon import OfflineEmissionsTracker\n```\nand the following main function:\n\n```\nif __name__ == \"__main__\":\n    with OfflineEmissionsTracker(country_iso_code=\"NLD\",\n                                 measure_power_secs=5) as tracker:                                                                                 \n        subprocess.call ([\"/usr/bin/Rscript\", \"--vanilla\", \"/pathto/MyrScript.r\"])\n```\nNote that because the script R script is executed in an external process, the option ```tracking_mode = \"process\"```\nis no longer adapted and only the mode where the CPU usage of the entire computer is measured is relevant.\n\n## Conclusion\n-------------\n\nIn this short tutorial, you have tested first-hand how to measure the energy consumption of a piece of code\nusing [CodeCarbon](https://codecarbon.io/). CodeCarbon can be deployed on larger application as well as\non HPC platforms.\nAlthough written in Python, CodeCarbon can be used for any other languages as long as you are able to use\nPython subprocess to execute the external program (i.e. R, C++, Fortran, ...).\n",[625,686],{"_path":626,"_dir":627,"_draft":6,"_partial":6,"_locale":7,"title":628,"description":7,"body":629,"_type":618,"_id":683,"_source":620,"_file":684,"_extension":622,"plainText":685},"/main/about","main","About",{"type":12,"children":630,"toc":679},[631,637,642,647,668,674],{"type":15,"tag":24,"props":632,"children":634},{"id":633},"about-the-green-digital-skills-course",[635],{"type":21,"value":636},"About the Green Digital Skills course",{"type":15,"tag":35,"props":638,"children":639},{},[640],{"type":21,"value":641},"In this course, we want to equip the attendees with\na basic knowledge of the link from digital and computational science to energy consumption, and\neventually equivalent CO2 emissions.",{"type":15,"tag":35,"props":643,"children":644},{},[645],{"type":21,"value":646},"The course material consists of two parts:",{"type":15,"tag":95,"props":648,"children":649},{},[650,663],{"type":15,"tag":99,"props":651,"children":652},{},[653,655,661],{"type":21,"value":654},"a lecture, in three chapters, introducing the general topic of ",{"type":15,"tag":160,"props":656,"children":658},{"className":657},[],[659],{"type":21,"value":660},"green",{"type":21,"value":662}," computing",{"type":15,"tag":99,"props":664,"children":665},{},[666],{"type":21,"value":667},"a set of hands-on exercises, covering general good practices for software development, and tools for measuring energy and CO2 emissions on your laptop or on HPC clusters",{"type":15,"tag":24,"props":669,"children":671},{"id":670},"target-audience",[672],{"type":21,"value":673},"Target audience",{"type":15,"tag":35,"props":675,"children":676},{},[677],{"type":21,"value":678},"The target audience for this course includes, but is not limited to, students, reseachers,\ndata scientists, and IT support staff performing computational science, handling data, or\nusing/developing scientific software.",{"title":7,"searchDepth":604,"depth":604,"links":680},[681,682],{"id":633,"depth":604,"text":636},{"id":670,"depth":604,"text":673},"local_fs:main:about.md","main/about.md","---\ntitle: About\n---\n\n## About the Green Digital Skills course\n\nIn this course, we want to equip the attendees with\na basic knowledge of the link from digital and computational science to energy consumption, and\neventually equivalent CO2 emissions.\n\nThe course material consists of two parts: \n - a lecture, in three chapters, introducing the general topic of `green` computing\n - a set of hands-on exercises, covering general good practices for software development, and tools for measuring energy and CO2 emissions on your laptop or on HPC clusters \n\n\n## Target audience\n\nThe target audience for this course includes, but is not limited to, students, reseachers,\ndata scientists, and IT support staff performing computational science, handling data, or\nusing/developing scientific software.\n",{"_path":687,"_dir":627,"_draft":6,"_partial":6,"_locale":7,"title":688,"description":7,"body":689,"_type":618,"_id":705,"_source":620,"_file":706,"_extension":622,"plainText":707},"/main/contribute","Contribute",{"type":12,"children":690,"toc":702},[691,697],{"type":15,"tag":24,"props":692,"children":694},{"id":693},"contributing-to-this-lesson",[695],{"type":21,"value":696},"Contributing to this lesson",{"type":15,"tag":35,"props":698,"children":699},{},[700],{"type":21,"value":701},"Add contributing guidelines for you project.",{"title":7,"searchDepth":604,"depth":604,"links":703},[704],{"id":693,"depth":604,"text":696},"local_fs:main:contribute.md","main/contribute.md","---\ntitle: Contribute\n---\n\n## Contributing to this lesson\n\nAdd contributing guidelines for you project.",1731951827985]